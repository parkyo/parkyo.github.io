<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="https://parkyo.github.io/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.2.1">Jekyll</generator><link href="https://parkyo.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://parkyo.github.io/" rel="alternate" type="text/html" /><updated>2020-06-25T00:14:08+09:00</updated><id>https://parkyo.github.io/</id><title type="html">Younse Park</title><subtitle>Hi, I am a software engineer</subtitle><entry><title type="html">Django - dynamically type url</title><link href="https://parkyo.github.io/categories/dynamic-url-django/" rel="alternate" type="text/html" title="Django - dynamically type url" /><published>2020-06-24T00:00:00+09:00</published><updated>2020-06-24T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/dynamic-url-django</id><content type="html" xml:base="https://parkyo.github.io/categories/dynamic-url-django/">&lt;pre&gt;&lt;code&gt;&quot;adults&quot;: &quot;1&quot;
&quot;childs&quot;:&quot;0&quot;
&quot;infants&quot;:&quot;0&quot;
&quot;res&quot;: &quot;0&quot;
&quot;vehicle&quot;:&quot;0&quot;
outbound_route = '1040'
outbound_date = '19-02-2019'
inbound_route = '1042'
inbound_date = '20-02-2019'

url = &quot;https://booking.snav.it/#/booking/rates&quot;  # no trailing /
final_url = '/'.join([url, outbound_route, outbound_date, inbound_route, inbound_date])
res = requests.get(final_url, params=params)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or you could use a formatted string literal:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;url = &quot;https://booking.snav.it/#/booking/rates/&quot;
final_url = f'{url}{outbound_route}/{outbound_date}/{inbound_route}/{inbound_date}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;output&quot;&gt;output&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;https://booking.snav.it/#/booking/rates/1040/19-02-2019/1042/19-02-2019?adults=1&amp;amp;childs=0&amp;amp;infants=0&amp;amp;res=0&amp;amp;vehicle=0&lt;/code&gt;&lt;/pre&gt;</content><category term="blog" /><category term="web" /><category term="server-side" /><category term="django" /><category term="python" /><summary type="html">&quot;adults&quot;: &quot;1&quot;
&quot;childs&quot;:&quot;0&quot;
&quot;infants&quot;:&quot;0&quot;
&quot;res&quot;: &quot;0&quot;
&quot;vehicle&quot;:&quot;0&quot;
outbound_route = '1040'
outbound_date = '19-02-2019'
inbound_route = '1042'
inbound_date = '20-02-2019'</summary></entry><entry><title type="html">Django - how to fetch data from external website</title><link href="https://parkyo.github.io/categories/fetch/" rel="alternate" type="text/html" title="Django - how to fetch data from external website" /><published>2020-06-23T00:00:00+09:00</published><updated>2020-06-23T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/fetch</id><content type="html" xml:base="https://parkyo.github.io/categories/fetch/">&lt;h2 id=&quot;fetch&quot;&gt;Fetch&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Fetch&lt;/strong&gt; is a process of bringing or displaying data to an alternate location.&lt;/p&gt;

&lt;h2 id=&quot;fetch-data-from-web&quot;&gt;Fetch data from web&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Web scraping&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def fetchFilteredClasses(dpt):
    classnames=[]
    url = 'https://www.lsa.umich.edu/cg/cg_results.aspx?termArray=f_20_2310&amp;amp;cgtype=ug&amp;amp;department=&amp;amp;allsections=true'
    response = requests.get(url)
    soup = BeautifulSoup(response.content,&quot;html.parser&quot;)
    for a in soup.findAll('div', attrs = {'class' : 'row toppadding_main bottompadding_interior'}):
        name = a.find('div', attrs={'class':'col-sm-12'})
        classnames.append(name.text)

    df = pd.DataFrame({'Class Name':classnames}) 
    df.to_csv('products.csv', index=False, encoding='utf-8')

&lt;/code&gt;&lt;/pre&gt;</content><category term="blog" /><category term="concepts" /><category term="web" /><category term="server-side" /><summary type="html">Fetch
Fetch is a process of bringing or displaying data to an alternate location.</summary></entry><entry><title type="html">Python basics</title><link href="https://parkyo.github.io/categories/python-basics/" rel="alternate" type="text/html" title="Python basics" /><published>2020-06-22T00:00:00+09:00</published><updated>2020-06-22T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/python-basics</id><content type="html" xml:base="https://parkyo.github.io/categories/python-basics/">&lt;h3 id=&quot;uses&quot;&gt;Uses&lt;/h3&gt;
&lt;li&gt;Web Development&lt;/li&gt;
&lt;li&gt;Machine Learning&lt;/li&gt;
&lt;li&gt;Data Analytics&lt;/li&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;self&quot;&gt;self&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;self&lt;/strong&gt; is an instance of the class to access properties and methods of the class&lt;/p&gt;</content><category term="blog" /><category term="concepts" /><category term="python" /><summary type="html">Uses
Web Development
Machine Learning
Data Analytics

self
self is an instance of the class to access properties and methods of the class</summary></entry><entry><title type="html">What is Operating System</title><link href="https://parkyo.github.io/categories/operating-system/" rel="alternate" type="text/html" title="What is Operating System" /><published>2020-06-22T00:00:00+09:00</published><updated>2020-06-22T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/operating-system</id><content type="html" xml:base="https://parkyo.github.io/categories/operating-system/">&lt;p&gt;&lt;strong&gt;Operating Systems&lt;/strong&gt; are programs for computers to operate on their own. 
&lt;i&gt;ex) MacOS, Android, Windows…&lt;/i&gt;&lt;/p&gt;

&lt;h3 id=&quot;features&quot;&gt;Features&lt;/h3&gt;
&lt;li&gt;&lt;strong&gt;Device Drivers&lt;/strong&gt; : intermediaries between software programs and hardware peripheral using API allowing talking to I/O hardware&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multitasking&lt;/strong&gt; : allows multiple programs on a single CPU&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Virtual Memory&lt;/strong&gt; : virtualizes locations of the memory allocated to each program to hide physical locations and simplify it for programmers&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dynamic Memory Allocation&lt;/strong&gt; : allows program sto have flexible memory size with virtual memory addresses&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Memory Protection&lt;/strong&gt; : prevets a program from destroying memory of the other progam&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Time Sharing&lt;/strong&gt; : manages multiple users&lt;/li&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Unix &lt;/strong&gt;appears to simplify the engineering of the early OS by separating it into two parts:&lt;/p&gt;
&lt;li&gt;&lt;strong&gt;Kernel&lt;/strong&gt; : manages memory and multi-tasking or deals with I/O&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;programs &amp;amp; libraries&lt;/strong&gt;&lt;/li&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;ubuntu&quot;&gt;Ubuntu&lt;/h3&gt;
&lt;p&gt;An open-source, Debian based operating system&lt;/p&gt;</content><category term="blog" /><category term="concepts" /><category term="computer" /><summary type="html">Operating Systems are programs for computers to operate on their own. 
ex) MacOS, Android, Windows…</summary></entry><entry><title type="html">error: failed to push some refs to</title><link href="https://parkyo.github.io/categories/git-pull/" rel="alternate" type="text/html" title="error: failed to push some refs to" /><published>2020-06-22T00:00:00+09:00</published><updated>2020-06-22T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/git-pull</id><content type="html" xml:base="https://parkyo.github.io/categories/git-pull/">&lt;p&gt;When this error happens,&lt;br /&gt;
&lt;span&gt;&lt;img src=&quot;/images/gitpull.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$git pull origin master
$i
$:wq
$git push&lt;/code&gt;&lt;/pre&gt;</content><category term="blog" /><category term="git" /><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://parkyo.github.io" /></entry><entry><title type="html">render vs. HTTPResponse vs. HTTPResponseredirect</title><link href="https://parkyo.github.io/categories/render-httpresponse/" rel="alternate" type="text/html" title="render vs. HTTPResponse vs. HTTPResponseredirect" /><published>2020-06-21T00:00:00+09:00</published><updated>2020-06-21T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/render-httpresponse</id><content type="html" xml:base="https://parkyo.github.io/categories/render-httpresponse/">&lt;p&gt;
&lt;strong&gt;HTTP reponse code&lt;/strong&gt; indicates a specific HTTP request has been successfully completed
&lt;ol&gt;
&lt;li&gt;Informatioin responses(100-)&lt;/li&gt;
&lt;li&gt;Successful responses (200-)&lt;/li&gt;
&lt;li&gt;Redirects (300-)&lt;/li&gt;
&lt;li&gt;Client errors (400-)&lt;/li&gt;
&lt;li&gt;Server errors (400-)&lt;/li&gt;
&lt;/ol&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;&lt;strong&gt;200 OK&lt;/strong&gt;&lt;/code&gt;
&lt;li&gt;&lt;strong&gt;GET&lt;/strong&gt;: fetching and transmission of the source in the message body&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;HEAD&lt;/strong&gt;: the entity headers are in the message body&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PUT or POST&lt;/strong&gt;: transmission of the resource describing the result in the message body&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;TRACE&lt;/strong&gt;: the request message in the message body as received by the server&lt;/li&gt;
&lt;/p&gt;

&lt;h3 id=&quot;httpresponse&quot;&gt;HTTPResponse()&lt;/h3&gt;
&lt;blockquote&gt;HTTP 200&lt;/blockquote&gt;
&lt;li&gt;returns a HTTPResponse object&lt;/li&gt;
&lt;li&gt;usually used for small responses such as ajax dadta or small numbers&lt;/li&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;httpresponseredirect&quot;&gt;HTTPResponseredirect()&lt;/h3&gt;
&lt;blockquote&gt;HTTP 302 (found/moved temporarily)&lt;/blockquote&gt;
&lt;li&gt;redirects the page to the given url parameter&lt;/li&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;renderrequest-template_name-contextnone-content_typenone-stats-none-usingnone&quot;&gt;Render(request, template_name, context=None, content_type=None, stats-None, using=None)&lt;/h3&gt;
&lt;li&gt;instead of rendering the template in HTTPResponse()&lt;/li&gt;
&lt;li&gt;combines the template with the context and returns HTTPResponse object&lt;/li&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;required&quot;&gt;required&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;request &lt;/strong&gt;: object used to generate this response
&lt;strong&gt;template_name&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;optional&quot;&gt;optional&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;context &lt;/strong&gt;: a dictionary of values to add to the template context
&lt;strong&gt;content_type &lt;/strong&gt;: the MIME type to use fo rthe resulting doc.&lt;/p&gt;
&lt;blockquote&gt;&lt;strong&gt;MIME types&lt;/strong&gt;: is a media type that describes the nature and format of a document, file or assortment of bytes. &lt;code&gt;type/subtype&lt;/code&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;status&lt;/strong&gt;: status code for the response
&lt;strong&gt;using&lt;/strong&gt; : the name of a template engine to use for loading the template&lt;/p&gt;

&lt;h3 id=&quot;redirectto-args-permanentfalse-kwargs&quot;&gt;Redirect(to, args, permanent=false, kwargs)&lt;/h3&gt;
&lt;li&gt;instead of calling reverse within HTTPResponseredirect(), call redirect to move to the given url&lt;/li&gt;
&lt;li&gt;cannot transfer data between pages&lt;/li&gt;
&lt;li&gt;use names from url pattern in urls.py&lt;/li&gt;</content><category term="blog" /><category term="concepts" /><category term="web" /><category term="server-side" /><category term="django" /><summary type="html">HTTP reponse code indicates a specific HTTP request has been successfully completed

Informatioin responses(100-)
Successful responses (200-)
Redirects (300-)
Client errors (400-)
Server errors (400-)



200 OK
GET: fetching and transmission of the source in the message body
HEAD: the entity headers are in the message body
PUT or POST: transmission of the resource describing the result in the message body
TRACE: the request message in the message body as received by the server</summary></entry><entry><title type="html">CSRF Token</title><link href="https://parkyo.github.io/categories/CSRF-token/" rel="alternate" type="text/html" title="CSRF Token" /><published>2020-06-21T00:00:00+09:00</published><updated>2020-06-21T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/CSRF-token</id><content type="html" xml:base="https://parkyo.github.io/categories/CSRF-token/">&lt;h3 id=&quot;csrf-token&quot;&gt;CSRF Token&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Cross-site Request Forgery token&lt;/strong&gt; is a token containing a random value generated by the server-side application in order to prevent hackers from forging the user’s data. 
&lt;a href=&quot;https://www.youtube.com/watch?v=Ub5TLow9GL4&quot; class=&quot;image fit&quot;&gt;&lt;img src=&quot;/images/csrf_token.png&quot; /&gt;&lt;/a&gt;
When a client logs in, the server gives a session token unique to that client. The client needs to provide the same token in order to request to the server so that the server validates it.&lt;/p&gt;</content><category term="blog" /><category term="concepts" /><category term="web" /><category term="server-side" /><summary type="html">CSRF Token
Cross-site Request Forgery token is a token containing a random value generated by the server-side application in order to prevent hackers from forging the user’s data. 

When a client logs in, the server gives a session token unique to that client. The client needs to provide the same token in order to request to the server so that the server validates it.</summary></entry><entry><title type="html">Google Kick Start 2020 Round A - Allocation</title><link href="https://parkyo.github.io/categories/Google-kickstart-2020-A-allocation/" rel="alternate" type="text/html" title="Google Kick Start 2020 Round A - Allocation" /><published>2020-06-19T00:00:00+09:00</published><updated>2020-06-19T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/Google-kickstart-2020-A-allocation</id><content type="html" xml:base="https://parkyo.github.io/categories/Google-kickstart-2020-A-allocation/">&lt;p&gt;&lt;a href=&quot;https://codingcompetitions.withgoogle.com/kickstart/round/000000000019ffc7/00000000001d3f56&quot;&gt;LINK&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;
&lt;p&gt;There are N houses for sale. The i-th house costs Ai dollars to buy. You have a budget of B dollars to spend.
What is the maximum number of houses you can buy?&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&lt;strong&gt;input&lt;/strong&gt;: 
3
4 100
20 90 40 90
4 50
30 30 10 10
3 300
999 999 999&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&lt;strong&gt;output&lt;/strong&gt;:
Case #1: 2
Case #2: 3
Case #3: 0&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt; written in C++&lt;/blockquote&gt;

&lt;p&gt;First of all, I read the word ‘maximum’ in the problem and automatically thought it was an optimization problem with dynamic programming. I tried to solve it with dp but NOPE lol. It was a simple problem.&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;p&gt;Sort the prices in the ascending order. Increment the count as looping through and adding the prices to the total price until the total prices go over the given amount of dollars.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&lt;strong&gt;int main(){
    int tests, size, b;
    cin &amp;gt;&amp;gt; tests;
    while(--tests &amp;gt;= 0){
        cin &amp;gt;&amp;gt; size &amp;gt;&amp;gt; b;
        int cur;
        vector &amp;lt;int&amp;gt; prices(size);
        for(size_t i = 0; i &amp;lt; prices.size(); ++i){
            cin &amp;gt;&amp;gt; cur;
            prices[i] = cur;
        }
        int cur_total = 0;
        int count = 0;
        sort(prices.begin(), prices.end());
        for(size_t i = 0; i &amp;lt; prices.size(); ++i){
            if (cur_total + prices[i] &amp;lt;= b){
                ++count;
                cur_total += prices[i];
            }
        }
        cout &amp;lt;&amp;lt; count;
    }
    return 0;
    
}   &lt;/strong&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Time Complexity = &lt;i&gt;O(nlogn)&lt;/i&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;Think about greedy algorithm first&lt;/blockquote&gt;</content><category term="blog" /><category term="algorithm" /><category term="kick_start" /><category term="greedy" /><summary type="html">LINK</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://parkyo.github.io" /></entry><entry><title type="html">Google Kick Start 2020 Round A - Plates</title><link href="https://parkyo.github.io/categories/Google-kick-start-2020-A-plates/" rel="alternate" type="text/html" title="Google Kick Start 2020 Round A - Plates" /><published>2020-06-19T00:00:00+09:00</published><updated>2020-06-19T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/Google-kick-start-2020-A-plates</id><content type="html" xml:base="https://parkyo.github.io/categories/Google-kick-start-2020-A-plates/">&lt;p&gt;&lt;a href=&quot;https://codingcompetitions.withgoogle.com/kickstart/round/000000000019ffc7/00000000001d40bb&quot;&gt;LINK&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;
&lt;p&gt;Dr. Patel has N stacks of plates. Each stack contains K plates. Each plate has a positive beauty value, describing how beautiful it looks.&lt;/p&gt;

&lt;p&gt;Dr. Patel would like to take exactly P plates to use for dinner tonight. If he would like to take a plate in a stack, he must also take all of the plates above it in that stack as well.&lt;/p&gt;

&lt;p&gt;Help Dr. Patel pick the P plates that would maximize the total sum of beauty values.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&lt;strong&gt;input&lt;/strong&gt;: 
2
2 4 5
10 10 100 30
80 50 10 50
3 2 3
80 80
15 50
20 10&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&lt;strong&gt;output&lt;/strong&gt;:
Case #1: 250
Case #2: 180&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;I have realized a lot of my test failures come from small errors like not checking enough conditions or confusing variables.
These small mistakes always prevent me from getting scores even after making almost perfect solution.
I think this comes from experience to detect what common errors can be in the solution or what specific formants are necessary for each competition.&lt;/blockquote&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;p&gt;Similar to &lt;strong&gt;0/1 Knapsack Problem&lt;/strong&gt; Bottom-up Approach&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Make two vectors to store values of all plates and to keep track of dynamic programming.&lt;/li&gt;
  &lt;li&gt;When storing values, store accumulated values per stack&lt;/li&gt;
  &lt;li&gt;dp[i][j] = max(dp[i-1][j-n] + values[i][n] where n from 0 to k)&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code&gt;
&lt;strong&gt;
int main(){
    int tests, s, p, num;
    cin &amp;gt;&amp;gt; tests;
    for(size_t i = 0; i &amp;lt; tests; ++i){
        cin &amp;gt;&amp;gt; s &amp;gt;&amp;gt; p &amp;gt;&amp;gt; num;
        vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; stacks(s, vector&amp;lt;int&amp;gt;(p+1));
        vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; sol(s, vector&amp;lt;&amp;lt;ntgt;(num+1));
        int cur = 0;
        for(size_t j = 0; j &amp;lt; s; ++j){
            for(size_t k = 1; k &amp;lt; p+1; ++k){
                cin &amp;gt;&amp;gt; cur;
                stacks[j][k] = stacks[j][k-1] + cur;
            }
        }
        
        for(size_t j = 0; j &amp;lt; s; ++j){
            for(size_t k = 1; k &amp;lt; num+1; ++k){
                if(j == 0){
                    if(k &amp;gt; p){
                        sol[j][k] = sol[j][k-1];
                    }else{
                        sol[j][k] = stacks[0][k];
                    }
                }else{
                    int max = 0;
                    for(size_t n = 0; n &amp;lt;= k; ++n){
                        int part = sol[j-1][k-n];
                        if(n &amp;lt;= p){
                            part += stacks[j][n];
                        }else{
                            part += stacks[j][p];
                        }
                            if(max &amp;lt; part){
                                max = part;
                            }
                    }
                    sol[j][k] = max;
                }
                
            }
        }
        
        cout &amp;lt;&amp;lt; &quot;Case #&quot; &amp;lt;&amp;lt; i+1 &amp;lt;&amp;lt; &quot;: &quot; &amp;lt;&amp;lt; sol[s-1][num] &amp;lt;&amp;lt; endl;
    }
    return 0;
    
}
   &lt;/strong&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Time Complexity = &lt;i&gt;O(s&lt;em&gt;p&lt;/em&gt;num)&lt;/i&gt;&lt;/strong&gt;&lt;/p&gt;</content><category term="blog" /><category term="algorithm" /><category term="kick_start" /><category term="dp" /><category term="bottom_up" /><summary type="html">LINK</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://parkyo.github.io" /></entry><entry><title type="html">Tech Terms</title><link href="https://parkyo.github.io/categories/Tech-terms/" rel="alternate" type="text/html" title="Tech Terms" /><published>2020-06-17T00:00:00+09:00</published><updated>2020-06-17T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/Tech-terms</id><content type="html" xml:base="https://parkyo.github.io/categories/Tech-terms/">&lt;p&gt;There are so many unfamiliar terms I need to know about.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deployment&lt;/strong&gt; means to install, test and implement a computer system or application&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Configuration&lt;/strong&gt; describes the arrangement of hardware and software components to make up the computer system.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Module&lt;/strong&gt; is a separate, interchangeable component.&lt;/p&gt;
&lt;li&gt;encampsulate code and data to implmenet a particular functionality&lt;/li&gt;
&lt;li&gt;has an interface to access its functionality in an uniform manner&lt;/li&gt;
&lt;li&gt;easily pluggable with another module that expects its iterface&lt;/li&gt;
&lt;li&gt;packaged in a single unit so that it can be easily deployed&lt;/li&gt;

&lt;p&gt;&lt;strong&gt;Forge&lt;/strong&gt; is a web-based collaborative software platform for developing and sharing computer application.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Encoding&lt;/strong&gt; is transforming a data from one type to another&lt;/p&gt;
&lt;li&gt;&lt;strong&gt;UTF-8&lt;/strong&gt;&lt;/li&gt;
&lt;p&gt;= variable-width : from character code points to unicode&lt;/p&gt;</content><category term="blog" /><category term="concepts" /><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://parkyo.github.io" /></entry></feed>
