<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="https://parkyo.github.io/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.2.1">Jekyll</generator><link href="https://parkyo.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://parkyo.github.io/" rel="alternate" type="text/html" /><updated>2020-06-18T01:43:41+09:00</updated><id>https://parkyo.github.io/</id><title type="html">Younse Park</title><subtitle>Hi, I am a software engineer</subtitle><entry><title type="html">Django - Deploy</title><link href="https://parkyo.github.io/categories/Django-deploy/" rel="alternate" type="text/html" title="Django - Deploy" /><published>2020-06-17T00:00:00+09:00</published><updated>2020-06-17T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/Django-deploy</id><content type="html" xml:base="https://parkyo.github.io/categories/Django-deploy/">&lt;strong&gt;Deployment&lt;/strong&gt; means to install, test and implement a computer system or application</content><category term="blog" /><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://parkyo.github.io" /></entry><entry><title type="html">Django Concepts for TODO List</title><link href="https://parkyo.github.io/categories/Django-concepts/" rel="alternate" type="text/html" title="Django Concepts for TODO List" /><published>2020-06-17T00:00:00+09:00</published><updated>2020-06-17T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/Django-concepts</id><content type="html" xml:base="https://parkyo.github.io/categories/Django-concepts/">&lt;p&gt;&lt;a href=&quot;https://github.com/parkyo/helloworld_webapp&quot;&gt;&lt;strong&gt;Helloworld Web App&lt;/strong&gt; github&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;make-todo-list&quot;&gt;Make Todo List&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;python manage.py COMMAND&lt;/code&gt; allows you to interact with django project&lt;/p&gt;

&lt;h3 id=&quot;settingspy&quot;&gt;Settings.py&lt;/h3&gt;
&lt;p&gt;When creating a new app within the project, the app’s name has to be added to &lt;code&gt;INSTALLED_APPS&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;urlspy&quot;&gt;urls.py&lt;/h3&gt;
&lt;p&gt;Import new functions from {app_name}.views and add &lt;code&gt;path('{url}', {function})&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;viewspy&quot;&gt;views.py&lt;/h3&gt;
&lt;p&gt;If you created a separate html for the app in templates directory, add &lt;code&gt;from django.shortcuts import render&lt;/code&gt;
&lt;strong&gt;django.shortcuts&lt;/strong&gt; is a package that collects helper functions and classes that span multiple levels of MVC and introudce control coupling.&lt;/p&gt;
&lt;blockquote&gt;&lt;strong&gt;Control coupling&lt;/strong&gt; is one module controlling the flow of another by passing it information on what to do. &lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;render(request, template_name, context=None, content_type=None, using=None)&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;&lt;strong&gt;render&lt;/strong&gt; is gathering data, loading the associated templates, applying the data to the templates, and sending the output to the user. 

#### required
&lt;strong&gt;request &lt;/strong&gt;: object used to generate this response
&lt;strong&gt;template_name&lt;/strong&gt;

#### optional
&lt;strong&gt;context &lt;/strong&gt;: a dictionary of values to add to the template context
&lt;strong&gt;content_type &lt;/strong&gt;: the MIME type to use fo rthe resulting doc.
&lt;blockquote&gt;&lt;strong&gt;MIME types&lt;/strong&gt;: is a media type that describes the nature and format of a document, file or assortment of bytes. &lt;code&gt;type/subtype&lt;/code&gt;&lt;/blockquote&gt;
&lt;strong&gt;status&lt;/strong&gt;: status code for the response
&lt;strong&gt;using&lt;/strong&gt; : the name of a template engine to use for loading the template

&lt;code&gt;from django.http import HttpResponse, HttpResposneRedirect&lt;/code&gt;
&lt;blockquote&gt;&lt;strong&gt;HttpRequest&lt;/strong&gt; objects that contain metadata are created automatically by Django&lt;/blockquote&gt;
Request and response objects are used to pass state through the system.

&lt;blockquote&gt;Page is requested -&amp;gt; &lt;strong&gt;HttpRequest&lt;/strong&gt; created with metadata about the request -&amp;gt; load view with &lt;strong&gt;HttpRequest&lt;/strong&gt; -&amp;gt; each returns &lt;strong&gt;HttpResponse&lt;/strong&gt; object&lt;/blockquote&gt;

&lt;code&gt;return HttpResponse('{url}' or {&quot;{msg}&quot;})&lt;/code&gt;

### settings.py
&lt;pre&gt;&lt;code&gt;import os&lt;/code&gt;&lt;/pre&gt;
Add  &lt;code&gt;os.path.join(BASE_DIR, 'templates')&lt;/code&gt; in &lt;code&gt;TEMPLATES &amp;gt; DIRS&lt;/code&gt; 

In your live server environment, tell WSGI app what settings file to use
&lt;blockquote&gt;WSGI is the Web Server Gateway Interface that forwards requests to web apps or frameworks in Python&lt;/blockquote&gt;

&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/topics/http/shortcuts/&quot;&gt;reference&lt;/a&gt;
&lt;/blockquote&gt;</content><category term="blog" /><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://parkyo.github.io" /></entry><entry><title type="html">Tech Terms</title><link href="https://parkyo.github.io/categories/Tech-terms/" rel="alternate" type="text/html" title="Tech Terms" /><published>2020-06-17T00:00:00+09:00</published><updated>2020-06-17T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/Tech-terms</id><content type="html" xml:base="https://parkyo.github.io/categories/Tech-terms/">There have been so many unfamiliar terms I need to know about. 

&lt;strong&gt;Deployment&lt;/strong&gt; means to install, test and implement a computer system or application

&lt;strong&gt;Configuration&lt;/strong&gt; describes the arrangement of hardware and software components to make up the computer system. 

&lt;strong&gt;Module&lt;/strong&gt; is a separate, interchangeable component.
&lt;li&gt;encampsulate code and data to implmenet a particular functionality&lt;/li&gt;
&lt;li&gt;has an interface to access its functionality in an uniform manner&lt;/li&gt;
&lt;li&gt;easily pluggable with another module that expects its iterface&lt;/li&gt;
&lt;li&gt;packaged in a single unit so that it can be easily deployed&lt;/li&gt;</content><category term="blog" /><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://parkyo.github.io" /></entry><entry><title type="html">Convert a snake case to a camel case</title><link href="https://parkyo.github.io/categories/snake_to_camel/" rel="alternate" type="text/html" title="Convert a snake case to a camel case" /><published>2020-06-16T00:00:00+09:00</published><updated>2020-06-16T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/snake_to_camel</id><content type="html" xml:base="https://parkyo.github.io/categories/snake_to_camel/">## Problem
Convert from snake-case to camel-case and return it.

## Example
&lt;pre&gt;&lt;code&gt;&lt;strong&gt;input&lt;/strong&gt;: 
naver_webtoon
NAVER_WEBTOON
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&lt;strong&gt;output&lt;/strong&gt;:
naverWebtoon
naverWebtoon&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt; written in C++&lt;/blockquote&gt;

## Solution 1
1. loop through the snake case string
2. As iterationg, have a boolean 'cap' and update it if there is a underdash to convert the next letter to cap
&lt;br&gt;&lt;strong&gt;Time Complexity = &lt;i&gt;O(n)&lt;/i&gt;&lt;/strong&gt;

&lt;pre&gt;&lt;code&gt;
&lt;strong&gt;
string convertCamel(string snake){
    string camel;
    bool cap = false;
    for(char c : snake){
        if(!cap &amp;&amp; (int)c &lt; 91){&lt;/strong&gt;&lt;i&gt;//if the char is cap when it shouldn't be&lt;/i&gt;&lt;strong&gt;
            camel.push_back(tolower(c)); 
        }else if(c == '_'){&lt;/strong&gt;&lt;i&gt;//if there is an underdash, the next char should be capitalized&lt;/i&gt;&lt;strong&gt;
            cap = true;
        }else if(cap){&lt;/strong&gt;&lt;i&gt;//if there should be a cap char convert the char to cap if it is not. Else, just push it back&lt;/i&gt;&lt;strong&gt;
            if((int)c &gt; 97){
                camel.push_back(toupper(c));
            }else{
                camel.push_back(c);
            }
            cap = false;
        }else{
            camel.push_back(c);
        }
    }
    return camel;
}   
&lt;/strong&gt;
&lt;/code&gt;&lt;/pre&gt;</content><category term="blog" /><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://parkyo.github.io" /></entry><entry><title type="html">Print all numbers from 1 to n*n</title><link href="https://parkyo.github.io/categories/print-all-nums-from-1-to-n-n/" rel="alternate" type="text/html" title="Print all numbers from 1 to n*n" /><published>2020-06-16T00:00:00+09:00</published><updated>2020-06-16T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/print-all-nums-from-1-to-n*n</id><content type="html" xml:base="https://parkyo.github.io/categories/print-all-nums-from-1-to-n-n/">## Problem
Print all numbers from 1 to n^2 in 'ㄹ' shape

## Example
&lt;pre&gt;&lt;code&gt;&lt;strong&gt;input&lt;/strong&gt;: 
4
5
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&lt;strong&gt;output&lt;/strong&gt;:
1 2 3 4
8 7 6 5 
9 10 11 12
16 15 14 13

1 2 3 4 5
10 9 8 7 6
11 12 13 14 15
20 19 18 17 16
21 22 23 24 25&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt; written in C++&lt;/blockquote&gt;

## Solution 1
Use &lt;code&gt;std::stack&lt;/code&gt; to store every even number line
&lt;br&gt;&lt;strong&gt;Time Complexity = &lt;i&gt;O(n)&lt;/i&gt;&lt;/strong&gt;

&lt;pre&gt;&lt;code&gt;
&lt;strong&gt;
void printMultiples(int n){
    stack&lt;int&gt; reverseList;
    size_t line = 1;
    for(size_t i = 1; i &lt;= n*n; ++i){
        if (line %2 == 0){
            reverseList.push((int)i);
        }else{
            cout &lt;&lt; i &lt;&lt; &quot; &quot;;
        }
        if (i%n == 0 &amp;&amp; line %2 == 1){
            ++line;
            cout &lt;&lt; &quot;\n&quot;;
        }
        if (reverseList.size() == n){
            for(size_t j = 0; j &lt; n; ++j){
                cout &lt;&lt; reverseList.top() &lt;&lt; &quot; &quot;;
                reverseList.pop();
            }
            cout &lt;&lt; &quot;\n&quot;;
        }
    }
}
&lt;/strong&gt;
&lt;/code&gt;&lt;/pre&gt;</content><category term="blog" /><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://parkyo.github.io" /></entry><entry><title type="html">Check if a string is a substring of another</title><link href="https://parkyo.github.io/categories/Substring_prob1/" rel="alternate" type="text/html" title="Check if a string is a substring of another" /><published>2020-06-16T00:00:00+09:00</published><updated>2020-06-16T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/Substring_prob1</id><content type="html" xml:base="https://parkyo.github.io/categories/Substring_prob1/">## Problem
Check if a string is a substring of another string. If true, return the index of the substring's first letter in the other string. Else, return -1.

## Example
&lt;pre&gt;&lt;code&gt;&lt;strong&gt;input&lt;/strong&gt;: 
abcde cd
abcde cda
abcd de
abcbcde bc&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&lt;strong&gt;output&lt;/strong&gt;:
2
-1
-1
1&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt; written in C++&lt;/blockquote&gt;

## Solution 1
1. loop through the string &lt;strong&gt;a&lt;/strong&gt;
2. As iterating, check if the current char matches any char of the string &lt;strong&gt;b&lt;/strong&gt;.
3. If they do, iterate through the string &lt;strong&gt;b&lt;/strong&gt; along with a to check if all the chars match
&lt;br&gt;&lt;strong&gt;Time Complexity = &lt;i&gt;O(n)&lt;/i&gt;&lt;/strong&gt;

&lt;pre&gt;&lt;code&gt;
&lt;strong&gt;int substring(string a, string b){
    int result = -1; //result to return
    size_t b_ind = 0; //index to iterate through b
    for(size_t i = 0; i &lt; a.size(); ++i){
        if(b[b_ind] == a[i]){ &lt;/strong&gt;&lt;i&gt;//if the first char of b matches the char in a&lt;/i&gt;&lt;strong&gt;
        if (b_ind == 0){ &lt;/strong&gt;&lt;i&gt;//if it is the first letter in b, save it in result&lt;/i&gt;&lt;strong&gt;
                result = (int)i;
            }
            if (b_ind == b.size() -1){&lt;/strong&gt;&lt;i&gt;//if all chars in b are in a, return result&lt;/i&gt;&lt;strong&gt;
                return result;
            }
            ++b_ind;&lt;/strong&gt;&lt;i&gt;//update b_ind to iterate&lt;/i&gt;&lt;strong&gt;
        }else if (b_ind &gt; 0 &amp;&amp; a[i-1] == a[i]){ &lt;/strong&gt;&lt;i&gt;//if b_ind is at 1 and prev char in a equals to the current, cout it as found &lt;/i&gt;&lt;strong&gt;
            if (b_ind == 1){                       
                ++result;
            }
        }else{ &lt;/strong&gt;&lt;i&gt;//if the chars don't match, reset result and b_ind&lt;/i&gt;&lt;strong&gt;
            if (result != -1){
                result = -1;
            }
            b_ind = 0;
        }

    }

    if (b_ind != b.size()){
        result = -1;
    }
    return result;
}   &lt;/strong&gt;
&lt;/code&gt;&lt;/pre&gt;

## Solution 2
Use &lt;a href = &quot;http://www.cplusplus.com/reference/string/string/find/&quot;&gt;&lt;code&gt;std::string find(string str)&lt;/code&gt;&lt;/a&gt; 


&lt;pre&gt;&lt;code&gt;&lt;strong&gt;
int substring(string a, string b){
    size_t found = a.find(b);
    if (found == a.npos){
        return -1;
    }else{
        return found;
    }
}
&lt;/strong&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;strong&gt;Time Complexity = &lt;i&gt;O(n)&lt;/i&gt;&lt;/strong&gt;

## Follow-up
What if the string a contains multiple words with space in between and b is a word? 
### Example
&lt;pre&gt;&lt;code&gt;&lt;strong&gt;input&lt;/strong&gt;: 
&quot;geeks for geeks&quot; &quot;for&quot;
&quot;geeks for geeks&quot; &quot;sfor&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&lt;strong&gt;output&lt;/strong&gt;:
6
-1&lt;/code&gt;&lt;/pre&gt;

Solution is the same with &lt;strong&gt;Solution 2&lt;/strong&gt;.</content><category term="blog" /><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://parkyo.github.io" /></entry><entry><title type="html">How to start Django</title><link href="https://parkyo.github.io/categories/set-up-django/" rel="alternate" type="text/html" title="How to start Django" /><published>2020-06-15T00:00:00+09:00</published><updated>2020-06-15T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/set-up-django</id><content type="html" xml:base="https://parkyo.github.io/categories/set-up-django/">I have created &lt;a href = &quot;https://github.com/parkyo/helloworld_webapp&quot;&gt;&lt;strong&gt;Helloworld web app&lt;/strong&gt;&lt;/a&gt; that includes todo list to practice basic web app development

## Django
&lt;strong&gt;Django&lt;/strong&gt; is a server-side Python web framework. 
&lt;img src = &quot;django.png&quot; width = 70%/&gt;

### Set-Up Django for MacOS
Django Development Environment includes Python scripts and a simple development webserver that you can test local Djnago web applications on web browser. (&lt;a href=&quot;https://www.youtube.com/watch?v=UyQn0BhVqNU&amp;list=PLBZBJbE_rGRXBhJNdKbN7IUy-ctlOFxA1&amp;index=1&quot;&gt;reference&lt;/a&gt;)
#### 1. Install Python
&lt;blockquote&gt;python 3.8.2 &lt;/blockquote&gt;
&lt;strong&gt;Homebrew&lt;/strong&gt; is an open-source software package manager that helps install different applications on MacOS
&lt;pre&gt;&lt;code&gt;$brew install python3&lt;/code&gt;&lt;/pre&gt;
#### 2. Install Pipenv
&lt;strong&gt;Pipenv&lt;/strong&gt; is a tool that automatically creates and manages a virtual environment for Python. We need a virtual environment to keep dependencies required by different projects separate by creating isolated python virtual environments for them. Pipenv prevents having to use &lt;code&gt;pip&lt;/code&gt; and &lt;code&gt;virtualenv&lt;/code&gt; separately. (&lt;a href = &quot;https://www.geeksforgeeks.org/python-virtual-environment/&quot;&gt; GeeksForGeeks &lt;/a&gt;)
&lt;pre&gt;&lt;code&gt;$pip3 install pipenv&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt; &lt;strong&gt;pip3&lt;/strong&gt; is automatically installed by Homebrew. Pip3 is another package manager that includes &lt;code&gt;pipenv&lt;/code&gt;&lt;/blockquote&gt;
#### 3. Move to a directory and create a folder for the new project
&lt;pre&gt;&lt;code&gt;$mkdir helloworld_webapp
$cd helloworld_webapp
&lt;/code&gt;&lt;/pre&gt;
#### 4. Install django with pipenv
Pipenv creates a virtual environment &lt;i&gt;django&lt;/i&gt; of 2.1 version speicifically for this project.
&lt;pre&gt;&lt;code&gt;$pipenv instal django==2.1&lt;/code&gt;&lt;/pre&gt;
#### 5. Activate the virtual environment
&lt;pre&gt;&lt;code&gt;$pipenv shell&lt;/code&gt;&lt;/pre&gt;
This allows you to use the specific version of django that you installed for your project.
#### 6. Create a new project 
&lt;pre&gt;&lt;code&gt;$django-admin startproject helloworld_project .&lt;/code&gt;&lt;/pre&gt;

This starts a new project, helloworld_project in the current directory.


  Now you can run django server &lt;code&gt;$python manage.py runserver&lt;/code&gt; and open the local host to view your project on web browser!</content><category term="blog" /><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://parkyo.github.io/images/django.png" /></entry><entry><title type="html">June_3rd</title><link href="https://parkyo.github.io/categories/Coding-test-prep/" rel="alternate" type="text/html" title="June_3rd" /><published>2020-06-14T00:00:00+09:00</published><updated>2020-06-14T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/Coding-test-prep</id><content type="html" xml:base="https://parkyo.github.io/categories/Coding-test-prep/">I can almost say coding test is all you need to get a job as a junior software engineer because if you don't pass the coding test, you are not given a chance for an interview at all. 
I have also experience many failures due to my lacking experience with coding test problems. 
I have planned to solve at least one coding problem per day but it has not been easy. 
Then, I thought let's give myself a moderate pressure to study coding problems. And that is participating coding competitions.</content><category term="blog" /><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://parkyo.github.io/images/weekly_report.jpg" /></entry><entry><title type="html">Django Migrations</title><link href="https://parkyo.github.io/categories/Django-migrations/" rel="alternate" type="text/html" title="Django Migrations" /><published>2020-06-14T00:00:00+09:00</published><updated>2020-06-14T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/Django-migrations</id><content type="html" xml:base="https://parkyo.github.io/categories/Django-migrations/">&lt;a href = &quot;https://realpython.com/django-migrations-a-primer/&quot;&gt; reference&lt;/a&gt;

&lt;strong&gt;Django&lt;/strong&gt; is designed to work with a relational database managed in MySQL, SQLite.
&lt;strong&gt;A relational database&lt;/strong&gt; organizes data in table composed of a fixed numbe of cols and infinite number of rows. Each column has a specific data type. A database schema describes these tables with their columns and datatypes. 
Instead of working directly with SQL, Django provides an object-relational mapper which maps the relational database to the wrld of OOP. You write Django models in python that define database fields that correspond to the cols in their database tables. When you update your models, migrations in teh app update the database tables. 
With &lt;strong&gt;django Migrations&lt;/strong&gt;, you can easily keep multiple instances of databases in sync with your models. 

&lt;code&gt;makemigrations&lt;/code&gt; create individual migration files based on the changes in models
&lt;code&gt;migrate&lt;/code&gt; apply and unapply those migrations made to database
&lt;code&gt;sqlmigrate&lt;/code&gt; displays the SQL statements for a migration
&lt;code&gt;showmigrations&lt;/code&gt; lists a project's migrations and their status

### models.py
&lt;span class = &quot;image center&quot;&gt;&lt;img src = &quot;/images/helloworld_models.png&quot;/&gt;&lt;/span&gt;

### migrate.py
&lt;span class = &quot;image center&quot;&gt;&lt;img src = &quot;/images/helloworld_migrate.png&quot;/&gt;&lt;/span&gt;</content><category term="blog" /><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://parkyo.github.io/images/django_migrations.jpg" /></entry><entry><title type="html">web design basics</title><link href="https://parkyo.github.io/categories/web-design-basics/" rel="alternate" type="text/html" title="web design basics" /><published>2020-06-14T00:00:00+09:00</published><updated>2020-06-14T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/web-design-basics</id><content type="html" xml:base="https://parkyo.github.io/categories/web-design-basics/"># Javscript &amp; HTML &amp; CSS
&lt;li&gt;
HTML : provide the basic structure of sites
CSS : control presentation, formatting, and layout
Javscript : control the behavior of different elements
&lt;/li&gt;


## Javascript
&gt; It is a logic-based programming language that can be used to 
provide interactive contents in response to user's actions

## HTML
&gt; HyperTextMarkup Language
&lt;i&gt;Markup Language&lt;/i&gt; which use stags to identify different types of content and the purposes they each serve to the webpage

## CSS
&gt; Cascading Style Sheets
It gives the style to HTML elements

### object-fit
&lt;strong&gt;IMPORTANT&lt;/strong&gt; : This can be only applied to &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;tag 
&lt;li&gt;fill : stretch the image to fit&lt;/li&gt;
&lt;li&gt;contain : keep the ratio&lt;/li&gt;
&lt;li&gt;cover : crop the image&lt;/li&gt;
&lt;li&gt;scale-down : scale down to fit the size&lt;/li&gt;</content><category term="blog" /><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://parkyo.github.io/images/web-design-title.jpg" /></entry></feed>
