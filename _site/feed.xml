<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="https://parkyo.github.io/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.2.1">Jekyll</generator><link href="https://parkyo.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://parkyo.github.io/" rel="alternate" type="text/html" /><updated>2020-08-14T20:01:00+09:00</updated><id>https://parkyo.github.io/</id><title type="html">Younse Park</title><subtitle>Hi, I am a software engineer</subtitle><entry><title type="html">Leetcode - Binary Tree Zig Zag Level Order Traversal</title><link href="https://parkyo.github.io/categories/leetcode-zigzag-tree/" rel="alternate" type="text/html" title="Leetcode - Binary Tree Zig Zag Level Order Traversal" /><published>2020-08-14T00:00:00+09:00</published><updated>2020-08-14T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/leetcode-zigzag-tree</id><content type="html" xml:base="https://parkyo.github.io/categories/leetcode-zigzag-tree/">&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/&quot;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;
&lt;p&gt;Traverse the tree verticall from left to right&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;p&gt;Level order traversal with two stacks. 
Second stack should store the children reversely (right and left)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;strong&gt;vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; zigzagLevelOrder(TreeNode* root) {
        vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; list;
        if(root){
            stack&amp;lt;TreeNode*&amp;gt; s1;
            stack&amp;lt;TreeNode*&amp;gt; s2;
            s1.push(root);
            while(!s1.empty() || !s2.empty()){
                if(!s1.empty()){
                    list.resize(list.size() + 1);
                }
                while(!s1.empty()){
                    TreeNode* cur = s1.top();
                    s1.pop();
                    if(cur-&amp;gt;left){
                        s2.push(cur-&amp;gt;left);
                    }
                    if(cur-&amp;gt;right){
                        s2.push(cur-&amp;gt;right);
                    }
                    list[list.size()-1].push_back(cur-&amp;gt;val);
                }
                if(!s2.empty()){
                    list.resize(list.size()+1);
                }
                while(!s2.empty()){
                    TreeNode* cur = s2.top();
                    s2.pop();
                    if(cur-&amp;gt;right){
                        s1.push(cur-&amp;gt;right);
                    }
                    if(cur-&amp;gt;left){
                        s1.push(cur-&amp;gt;left);
                    }
                    list[list.size()-1].push_back(cur-&amp;gt;val);
                }
            }
        }
        
        return list;
    }
&lt;/strong&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Time Complexity : &lt;i&gt;O(n)&lt;/i&gt;&lt;/strong&gt;&lt;/p&gt;</content><category term="blog" /><category term="algorithm" /><category term="leetcode" /><category term="tree" /><category term="BTS" /><category term="important" /><summary type="html">link</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://parkyo.github.io" /></entry><entry><title type="html">Leetcode - Populating Next Right Pointers in Each Node</title><link href="https://parkyo.github.io/categories/leetcode-connect-siblings-tree/" rel="alternate" type="text/html" title="Leetcode - Populating Next Right Pointers in Each Node" /><published>2020-08-14T00:00:00+09:00</published><updated>2020-08-14T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/leetcode-connect-siblings-tree</id><content type="html" xml:base="https://parkyo.github.io/categories/leetcode-connect-siblings-tree/">&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/&quot;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;
&lt;p&gt;You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. 
Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.&lt;/p&gt;

&lt;p&gt;Initially, all next pointers are set to NULL.&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;p&gt;I initially had,&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;strong&gt;Node* connect(Node* root) {
        Node* arr[4096];
        Node* cur = root;
        size_t i = 1;
        arr[i-1] = root;
        if(root){
            int level = 2;
            int count = 1;
            while(arr[i-1]-&amp;gt;left){
                arr[i*2-1] = arr[i-1]-&amp;gt;left;
                arr[i*2] = arr[i-1]-&amp;gt;right;
                count += 2;
                arr[i*2-1]-&amp;gt;next = arr[i*2];
                if(count &amp;lt; pow(2, level)-1){
                    arr[i*2]-&amp;gt;next = arr[i]-&amp;gt;left;
                }else{
                    ++level;
                }
                ++i;
            }
        }
        
        return arr[0];
    }
&lt;/strong&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Time Complexity : &lt;i&gt;O(n)&lt;/i&gt;&lt;/strong&gt;
&lt;br /&gt;
However, I optimized the space to O(1) by removing the vector since you can traverse with previously connected nodes&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;strong&gt; Node* connect(Node* root) {
        size_t i = 1;
        if(!root){
            return root;
        }
        Node* first = root;
        while(first-&amp;gt;left){
            Node* cur = first;
            while(cur){
            (cur-&amp;gt;left)-&amp;gt;next = cur-&amp;gt;right;
            if(cur-&amp;gt;next){
                (cur-&amp;gt;right)-&amp;gt;next = (cur-&amp;gt;next)-&amp;gt;left;
            }
            cur = cur-&amp;gt;next;
            }
            first = first-&amp;gt;left;
        }
        
        return root;
    }&lt;/strong&gt;&lt;/code&gt;&lt;/pre&gt;</content><category term="blog" /><category term="algorithm" /><category term="leetcode" /><category term="tree" /><summary type="html">link</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://parkyo.github.io" /></entry><entry><title type="html">GeeksForGeeks - Vertical Traversal of Tree</title><link href="https://parkyo.github.io/categories/geeks-vertical_order_tree/" rel="alternate" type="text/html" title="GeeksForGeeks - Vertical Traversal of Tree" /><published>2020-08-13T00:00:00+09:00</published><updated>2020-08-13T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/geeks-vertical_order_tree</id><content type="html" xml:base="https://parkyo.github.io/categories/geeks-vertical_order_tree/">&lt;p&gt;&lt;a href=&quot;https://practice.geeksforgeeks.org/problems/check-for-bst/1&quot;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;
&lt;p&gt;Traverse the tree verticall from left to right&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;p&gt;Use &lt;strong&gt;bfs&lt;/strong&gt; and group the nodes in the same vertical axis in order.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;strong&gt;void bfs(Node* root, map&amp;lt;int, queue&amp;lt;int&amp;gt;&amp;gt;&amp;amp; mp){
    queue&amp;lt;Node*&amp;gt; q;
    queue&amp;lt;int&amp;gt; axis;
    q.push(root);
    axis.push(0);
    mp[0].push(root-&amp;gt;data);
    while(!q.empty()){
        Node* cur = q.front();
        if(cur-&amp;gt;left){
            q.push(cur-&amp;gt;left);
            int haxis = axis.front() - 1;
            mp[haxis].push((cur-&amp;gt;left)-&amp;gt;data);
        }
        if(cur-&amp;gt;right){
            q.push(cur-&amp;gt;right);
            int haxis = axis.front() + 1;
            mp[haxis].push((cur-&amp;gt;right)-&amp;gt;data);
        }
        
        q.pop();
        axis.pop();
    }
}

vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; verticalOrder(Node* root) {
    map&amp;lt;int, queue&amp;lt;int&amp;gt;&amp;gt; mp;
    bfs(root, mp);
    vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; list(mp.size());

    size_t i = 0;
    for(auto it = mp.begin(); it != mp.end(); ++it){
        list[i].resize((it-&amp;gt;second).size());
        size_t j = 0;
        while(!(it-&amp;gt;second).empty()){
            list[i][j] = (it-&amp;gt;second).front();
            (it-&amp;gt;second).pop();
            ++j;
        }
        ++i;
    }
    return list;
}
&lt;/strong&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Time Complexity : &lt;i&gt;O(logn)&lt;/i&gt;&lt;/strong&gt;&lt;/p&gt;</content><category term="blog" /><category term="algorithm" /><category term="must_do" /><category term="geeks" /><category term="important" /><category term="tree" /><category term="bfs" /><summary type="html">link</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://parkyo.github.io" /></entry><entry><title type="html">GeeksForGeeks - Check if the tree is a binary search tree</title><link href="https://parkyo.github.io/categories/geeks-check_bst/" rel="alternate" type="text/html" title="GeeksForGeeks - Check if the tree is a binary search tree" /><published>2020-08-11T00:00:00+09:00</published><updated>2020-08-11T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/geeks-check_bst</id><content type="html" xml:base="https://parkyo.github.io/categories/geeks-check_bst/">&lt;p&gt;&lt;a href=&quot;https://practice.geeksforgeeks.org/problems/check-for-bst/1&quot;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;
&lt;p&gt;Given a binary tree. Check whether it is a BST or not.&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;p&gt;Use recursioin by setting the low and high points&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&lt;strong&gt;bool helper(Node* root, Node* low, Node* high){
    if(!root){ &lt;/strong&gt;&lt;i&gt;//ALWAYS base case for tree recursion&lt;/i&gt;&lt;strong&gt;
        return true;
    }
    if(low &amp;amp;&amp;amp; low-&amp;gt;data &amp;gt;= root-&amp;gt;data){&lt;/strong&gt;&lt;i&gt;// Base 2 - !low can mean it is left-side node&lt;/i&gt;&lt;strong&gt;
        return false;
    }
    if(high &amp;amp;&amp;amp; high-&amp;gt;data &amp;lt;= root-&amp;gt;data){
        return false;
    }
    return helper(root-&amp;gt;left, low, root) &amp;amp;&amp;amp; helper(root-&amp;gt;right, root, high);
     &lt;/strong&gt;&lt;i&gt;// BOTH should be true therefore use &amp;amp;&amp;amp;
     // doesn't need to change low if it moves to the left side (vice versa)&lt;/i&gt;&lt;strong&gt;
}

bool isBST(Node* root) {
    helper(root, NULL, NULL);
}
&lt;/strong&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Time Complexity : &lt;i&gt;O(logn)&lt;/i&gt;&lt;/strong&gt;&lt;/p&gt;</content><category term="blog" /><category term="algorithm" /><category term="must_do" /><category term="geeks" /><category term="tree" /><category term="recursion" /><category term="important" /><summary type="html">link</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://parkyo.github.io" /></entry><entry><title type="html">Leetcode - Find Kth Positive Number</title><link href="https://parkyo.github.io/categories/leetcode-kth-missing/" rel="alternate" type="text/html" title="Leetcode - Find Kth Positive Number" /><published>2020-08-11T00:00:00+09:00</published><updated>2020-08-11T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/leetcode-kth-missing</id><content type="html" xml:base="https://parkyo.github.io/categories/leetcode-kth-missing/">&lt;p&gt;&lt;a href=&quot;https://practice.geeksforgeeks.org/problems/lru-cache/1&quot;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;
&lt;p&gt;Given an array arr of positive integers sorted in a strictly increasing order, and an integer k.
Find the kth positive integer that is missing from this array.&lt;/p&gt;

&lt;h2 id=&quot;solution-1&quot;&gt;Solution 1&lt;/h2&gt;
&lt;p&gt;Use binary search to find the gap where the Kth missing number exists&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;arr[i-1] = i&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;[ l ,  r )&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;m-1&lt;/code&gt; is the midpoint of the subarray in the binary search&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&lt;strong&gt;int findKthPositive(vector&amp;lt;int&amp;gt;&amp;amp; arr, int k) {
    size_t l = 0, r = arr.size();
    while(l &amp;lt; r){
        size_t m = (l + r + 1)/2 ;
        if(arr[m-1] - m &amp;lt; k){
            l = m;
        }else{
            r = m-1;
        }
    }
    &lt;/strong&gt;&lt;i&gt;//(l-1) + 1 + k&lt;/i&gt;&lt;strong&gt;
    return l + k;
}
&lt;/strong&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Time Complexity : &lt;i&gt;O(logn)&lt;/i&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;solution-2&quot;&gt;Solution 2&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&lt;strong&gt;int findKthPositive(vector&amp;lt;int&amp;gt;&amp;amp; arr, int k) {
        int count = arr[0]-1;
        size_t i = 1;
        while(i &amp;lt; arr.size() &amp;amp;&amp;amp; count &amp;lt; k){
            count += arr[i]-arr[i-1]-1;
            ++i;
        }
        if (count &amp;gt;= k){
            return i-1 + k;
        }
        return i + k;
}
&lt;/strong&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Time Complexity : &lt;i&gt;O(n)&lt;/i&gt;&lt;/strong&gt;&lt;/p&gt;</content><category term="blog" /><category term="algorithm" /><category term="must_do" /><category term="leetcode" /><summary type="html">link</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://parkyo.github.io" /></entry><entry><title type="html">GeeksForGeeks - Detect Loop in Linked List</title><link href="https://parkyo.github.io/categories/geeks-LL-loop/" rel="alternate" type="text/html" title="GeeksForGeeks - Detect Loop in Linked List" /><published>2020-08-09T00:00:00+09:00</published><updated>2020-08-09T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/geeks-LL-loop</id><content type="html" xml:base="https://parkyo.github.io/categories/geeks-LL-loop/">&lt;p&gt;&lt;a href=&quot;https://practice.geeksforgeeks.org/problems/detect-loop-in-linked-list/1&quot;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;
&lt;p&gt;Given a linked list of N nodes. The task is to check if the the linked list has a loop. Linked list can contain self loop.&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&lt;strong&gt;struct Node
{
    int data;
    struct Node *next;
    Node(int x) {
        data = x;
        next = NULL;
    }


bool detectLoop(Node* head)
{
    // your code here
    while(head){
        if(head-&amp;gt;data &amp;lt; 0){
            return true;
        }
        head-&amp;gt;data *= -1;
        head = head-&amp;gt;next;
    }
    return false;
}

&lt;/strong&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Time Complexity : &lt;i&gt;O(n)&lt;/i&gt;&lt;/strong&gt;&lt;/p&gt;</content><category term="blog" /><category term="algorithm" /><category term="must_do" /><category term="LinkedList" /><category term="geeks" /><summary type="html">link</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://parkyo.github.io" /></entry><entry><title type="html">GeeksForGeeks - Queue using two stacks</title><link href="https://parkyo.github.io/categories/geeks-stackqueue/" rel="alternate" type="text/html" title="GeeksForGeeks - Queue using two stacks" /><published>2020-08-08T00:00:00+09:00</published><updated>2020-08-08T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/geeks-stackqueue</id><content type="html" xml:base="https://parkyo.github.io/categories/geeks-stackqueue/">&lt;p&gt;&amp;lt;a href=”https://practice.geeksforgeeks.org/problems/queue-using-two-stacks/1&amp;gt;link&amp;lt;/a&amp;gt;&lt;/p&gt;

&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;
&lt;p&gt;Implement a Queue using 2 stacks s1 and s2 .
A Query Q is of 2 Types&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;1 x (a query of this type means  pushing ‘x’ into the queue)&lt;/li&gt;
  &lt;li&gt;2   (a query of this type means to pop element from queue and print the poped element)
    &lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
  &lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&lt;strong&gt;class StackQueue{
private:
    stack&lt;int&gt; s1;
    stack&lt;int&gt; s2;
    
public:
    void push(int v){
        s1.push(v);
    }
    
    int pop(){
        if(s1.empty()){
            return -1;
        }
        while(s1.size() &amp;gt; 1){
            s2.push(s1.top());
            s1.pop();
        }
        int rem = s1.top();
        s1.pop();
        while(!s2.empty()){
            s1.push(s2.top());
            s2.pop();
        }
        return rem;
    }
};
&amp;lt;/strong&amp;gt;&amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;
&lt;/int&gt;&lt;/int&gt;&lt;/strong&gt;&lt;/code&gt;&lt;/pre&gt;</content><category term="blog" /><category term="algorithm" /><category term="must_do" /><category term="stack" /><category term="queue" /><category term="geeks" /><summary type="html">&amp;lt;a href=”https://practice.geeksforgeeks.org/problems/queue-using-two-stacks/1&amp;gt;link&amp;lt;/a&amp;gt;</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://parkyo.github.io" /></entry><entry><title type="html">GeeksForGeeks - Circular Tour</title><link href="https://parkyo.github.io/categories/geeks-petrol_cycle/" rel="alternate" type="text/html" title="GeeksForGeeks - Circular Tour" /><published>2020-08-08T00:00:00+09:00</published><updated>2020-08-08T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/geeks-petrol_cycle</id><content type="html" xml:base="https://parkyo.github.io/categories/geeks-petrol_cycle/">&lt;p&gt;&lt;a href=&quot;https://practice.geeksforgeeks.org/problems/lru-cache/1&quot;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;
&lt;p&gt;Suppose there is a circle. There are N petrol pumps on that circle. You will be given two sets of data.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;The amount of petrol that every petrol pump has.&lt;/li&gt;
  &lt;li&gt;Distance from that petrol pump to the next petrol pump.
Find a starting point where the truck can start to get through the complete circle without exhausting its petrol in between.
Note :  Assume for 1 litre petrol, the truck can go 1 unit of distance.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&lt;strong&gt;struct petrolPump{
    int petrol;
    int distance;
};


int tour(petrolPump p[], int n){
    int start = 0, i = 0, pet = 0, loc = 0;
    while(start &amp;lt; n &amp;amp;&amp;amp; i &amp;lt; n){
        pet += p[loc].petrol - p[loc].distance;
        ++i;
        if(pet &amp;lt; 0){
            ++start;
            i = 0;
            pet = 0;
        }
        loc = (start + i)%n;
    }
    if(pet &amp;gt;= 0 &amp;amp;&amp;amp; i == n){
        return pet;
    }else{
        
    }
}
&lt;/strong&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Time Complexity : &lt;i&gt;O(n)&lt;/i&gt;&lt;/strong&gt;&lt;/p&gt;</content><category term="blog" /><category term="algorithm" /><category term="must_do" /><category term="geeks" /><summary type="html">link</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://parkyo.github.io" /></entry><entry><title type="html">GeeksForGeeks - Intersection Point in Y Shaped Linked List</title><link href="https://parkyo.github.io/categories/geeks-LL-intersect/" rel="alternate" type="text/html" title="GeeksForGeeks - Intersection Point in Y Shaped Linked List" /><published>2020-08-08T00:00:00+09:00</published><updated>2020-08-08T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/geeks-LL-intersect</id><content type="html" xml:base="https://parkyo.github.io/categories/geeks-LL-intersect/">&lt;p&gt;&lt;a href=&quot;https://practice.geeksforgeeks.org/problems/intersection-point-in-y-shapped-linked-lists/1/&quot;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;
&lt;p&gt;Given two singly linked lists of size N and M, write a program to get the point where two linked lists intersect each other.&lt;/p&gt;

&lt;h2 id=&quot;solution1&quot;&gt;Solution1&lt;/h2&gt;
&lt;p&gt;My initial thought was to iterate through two lists to figure out the size difference.
Then, I can set the starting point for the longer Linked List and iterate through both to see if the data of the current nodes are the same.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;strong&gt;int intersectPoint(Node* head1, Node* head2)
{
    int diff = -1, ans = 0;
    Node* n1 = head1;
    Node* n2 = head2;
    Node* longer = head1;
    Node* shorter = head2;
    while(n1 &amp;amp;&amp;amp; n2){
        n1 = n1-&amp;gt;next;
        n2 = n2-&amp;gt;next;
        ++diff;
    }
    if(n2){
        longer = head2;
        shorter = head1;
    }
    if(!n1 &amp;amp;&amp;amp; !n2){
        diff = 0;
    }
    while(diff &amp;gt; 0){
        longer = longer-&amp;gt;next;
        --diff;
    }
    while(longer){
        if(longer-&amp;gt;data == shorter-&amp;gt;data){
            ans = longer-&amp;gt;data;
        }else{
            ans = -1;
        }
        longer = longer-&amp;gt;next;
        shorter = shorter-&amp;gt;next;
    }
    return ans;
}

&lt;/strong&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Time Complexity : &lt;i&gt;O(n+m)&lt;/i&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;solution-2&quot;&gt;Solution 2&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;*** Much better solution&lt;/strong&gt;
Iterate through either list and multiply -1 to all nodes.
Then iterate through the other list and any negative number you encounter is the intersection. &lt;i&gt;(fcking brilliant)&lt;/i&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;strong&gt;int intersectPoint(Node* head1, Node* head2)
{
    int ans = -1;
    while(head1){
        head1-&amp;gt;data *= -1;
        head1 = head1-&amp;gt;next;
    }
    while(head2){
        if(head2-&amp;gt;data &amp;lt; 0){
            ans = head2-&amp;gt;data;
        }
        head2 = head2-&amp;gt;next;
    }
    return ans;
&lt;/strong&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;how-to-approach-this-solution&quot;&gt;How to approach this solution&lt;/h3&gt;
&lt;p&gt;Consider that the intersection is not only when the data are the same but the &lt;strong&gt;addresses&lt;/strong&gt; are the same. So if the intersected node’s data changes, the other list will change as well. Also, always try to use all the &lt;strong&gt;conditions&lt;/strong&gt; given as advantages: all node values are positive. We could’ve changed the node values as 0 or any negative number that the default value can’t be.&lt;/p&gt;</content><category term="blog" /><category term="algorithm" /><category term="must_do" /><category term="LinkedList" /><category term="important" /><category term="geeks" /><summary type="html">link</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://parkyo.github.io" /></entry><entry><title type="html">GeeksForGeeks - LRU Cache</title><link href="https://parkyo.github.io/categories/Geeks-LRUcache/" rel="alternate" type="text/html" title="GeeksForGeeks - LRU Cache" /><published>2020-08-08T00:00:00+09:00</published><updated>2020-08-08T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/Geeks-LRUcache</id><content type="html" xml:base="https://parkyo.github.io/categories/Geeks-LRUcache/">&lt;p&gt;&lt;a href=&quot;https://practice.geeksforgeeks.org/problems/lru-cache/1&quot;&gt;link&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;
&lt;p&gt;The task is to design and implement methods of an LRU cache. The class has two methods get() and set() which are defined as follows.
get(x)   : Returns the value of the key x if the key exists in the cache otherwise returns -1.
set(x,y) : inserts the value if the key x is not already present. If the cache reaches its capacity it should invalidate the least recently used item before inserting the new item.
In the constructor of the class the size of the cache should be intitialized.&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;p&gt;Use &lt;strong&gt;Doubly Linked List&lt;/strong&gt; and &lt;strong&gt;Unordered Map&lt;/strong&gt;.
&lt;strong&gt;DLL&lt;/strong&gt; gives the advantage of removing nodes and changing the order while &lt;strong&gt;map&lt;/strong&gt; can efficiently find if a key exists in the list.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;strong&gt;struct Node{
    int key;
  int value;
  Node* next;
  Node* prev;
  
  Node(int key, int value):key(key), value(value){}
};

class LRUCache
{
private:
    Node* last;
    Node* first;
    unordered_map&amp;lt;int, Node*&amp;gt; map;
    int size;

public:
    LRUCache(int cap):size(cap)
    {}
    
     int get(int key)
    {
        // this function should return value corresponding to key
        auto it = map.find(key);
        if(it != map.end()){
            Node* cur = it-&amp;gt;second;
            if(cur-&amp;gt;prev){
                (cur-&amp;gt;prev)-&amp;gt;next = cur-&amp;gt;next;    
            }
            if(cur-&amp;gt;next){
                (cur-&amp;gt;next)-&amp;gt;prev = cur-&amp;gt;prev;    
            }
            cur-&amp;gt;next = first;
            first-&amp;gt;prev = cur;
            first = cur;
            return (it-&amp;gt;second)-&amp;gt;value;
        }
        return -1;
    }
    
     void set(int key, int value)
    {
        // storing key, value pair
        
        auto it = map.find(key);
        if(it == map.end()){
            if(map.size() == size){
                int rem_key = first-&amp;gt;key;
                auto it = map.find(rem_key);
                if(first-&amp;gt;next){
                    (first-&amp;gt;next)-&amp;gt;prev = nullptr;    
                }
                first = first-&amp;gt;next;
                map.erase(it);
            }
            Node* n = new Node(key, value);
            last-&amp;gt;next = n;
            n-&amp;gt;prev = last;
            last = n;
            if(!first){
                first = n;
            }
            map.insert(pair&amp;lt;int,Node*&amp;gt;(key, n));
        }else{
            Node* n = it-&amp;gt;second;
            if(n-&amp;gt;prev){
                (n-&amp;gt;prev)-&amp;gt;next = n-&amp;gt;next;
            }
            if(n-&amp;gt;next){
                (n-&amp;gt;next)-&amp;gt;prev = n-&amp;gt;prev;
            }
            last-&amp;gt;next = n;
            n-&amp;gt;prev = last;
            last = n;
            if(first == n &amp;amp;&amp;amp; map.size() &amp;gt; 1){
                first = n-&amp;gt;next;
            }
        }
    }
};&lt;/strong&gt;&lt;/code&gt;&lt;/pre&gt;</content><category term="blog" /><category term="algorithm" /><category term="must_do" /><summary type="html">link</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://parkyo.github.io" /></entry></feed>
