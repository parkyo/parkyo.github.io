<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="https://parkyo.github.io/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.2.1">Jekyll</generator><link href="https://parkyo.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://parkyo.github.io/" rel="alternate" type="text/html" /><updated>2020-07-14T20:10:47+09:00</updated><id>https://parkyo.github.io/</id><title type="html">Younse Park</title><subtitle>Hi, I am a software engineer</subtitle><entry><title type="html">BeautifulSoup - next_sibling</title><link href="https://parkyo.github.io/categories/beautifulsoup-nextsibling/" rel="alternate" type="text/html" title="BeautifulSoup - next_sibling" /><published>2020-07-13T00:00:00+09:00</published><updated>2020-07-13T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/beautifulsoup-nextsibling</id><content type="html" xml:base="https://parkyo.github.io/categories/beautifulsoup-nextsibling/">&lt;p&gt;&lt;a href=&quot;https://www.crummy.com/software/BeautifulSoup/bs4/doc/#going-sideways&quot;&gt;DOC&lt;/a&gt;&lt;/p&gt;</content><category term="blog" /><category term="beautifulsoup" /><summary type="html">DOC</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://parkyo.github.io" /></entry><entry><title type="html">Django &amp;amp; Python - Lambda</title><link href="https://parkyo.github.io/categories/django-lambda/" rel="alternate" type="text/html" title="Django &amp; Python - Lambda" /><published>2020-07-03T00:00:00+09:00</published><updated>2020-07-03T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/django-lambda</id><content type="html" xml:base="https://parkyo.github.io/categories/django-lambda/"></content><category term="blog" /><category term="django" /><category term="python" /><category term="concepts" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://parkyo.github.io" /></entry><entry><title type="html">Django &amp;amp; Visual Studio Code - Debug</title><link href="https://parkyo.github.io/categories/django-vsc-debug/" rel="alternate" type="text/html" title="Django &amp; Visual Studio Code - Debug" /><published>2020-07-03T00:00:00+09:00</published><updated>2020-07-03T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/django-vsc-debug</id><content type="html" xml:base="https://parkyo.github.io/categories/django-vsc-debug/">&lt;p&gt;&lt;a href=&quot;https://code.visualstudio.com/docs/python/tutorial-django&quot;&gt;DOC&lt;/a&gt;&lt;/p&gt;</content><category term="blog" /><category term="django" /><category term="python" /><category term="VS_code" /><summary type="html">DOC</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://parkyo.github.io" /></entry><entry><title type="html">Django - Parse String into Date/Time</title><link href="https://parkyo.github.io/categories/django-datetime/" rel="alternate" type="text/html" title="Django - Parse String into Date/Time" /><published>2020-07-03T00:00:00+09:00</published><updated>2020-07-03T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/django-datetime</id><content type="html" xml:base="https://parkyo.github.io/categories/django-datetime/">&lt;p&gt;&lt;a href=&quot;https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior&quot;&gt;link&lt;/a&gt;&lt;/p&gt;</content><category term="blog" /><category term="django" /><category term="concepts" /><category term="python" /><summary type="html">link</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://parkyo.github.io" /></entry><entry><title type="html">Python - Web Scraping with Selenium</title><link href="https://parkyo.github.io/categories/django-selenium/" rel="alternate" type="text/html" title="Python - Web Scraping with Selenium" /><published>2020-07-03T00:00:00+09:00</published><updated>2020-07-03T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/django-selenium</id><content type="html" xml:base="https://parkyo.github.io/categories/django-selenium/">&lt;pre&gt;&lt;code&gt;final_url = f'{url}{name}001&amp;amp;termArray=f_20_2310/'
driver = webdriver.Chrome()
driver.get(final_url)
response = driver.execute_script(&quot;return document.documentElement.outerHTML&quot;)
driver.quit()
soup = BeautifulSoup(response, &quot;lxml&quot;)
panel = soup.find('div', attrs={'id':'classScheduleBody'})
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;how-to-web-scrape-without-opening-the-browser&quot;&gt;how to web scrape without opening the browser&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;from selenium.webdriver.chrome.options import Options

options = Options()
options.add_argument('--headless')&lt;/code&gt;&lt;/pre&gt;</content><category term="blog" /><category term="python" /><category term="web_scraping" /><summary type="html">final_url = f'{url}{name}001&amp;amp;termArray=f_20_2310/'
driver = webdriver.Chrome()
driver.get(final_url)
response = driver.execute_script(&quot;return document.documentElement.outerHTML&quot;)
driver.quit()
soup = BeautifulSoup(response, &quot;lxml&quot;)
panel = soup.find('div', attrs={'id':'classScheduleBody'})</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://parkyo.github.io" /></entry><entry><title type="html">Python - AttrbiuteError</title><link href="https://parkyo.github.io/categories/python-attributeerror/" rel="alternate" type="text/html" title="Python - AttrbiuteError" /><published>2020-07-03T00:00:00+09:00</published><updated>2020-07-03T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/python-attributeerror</id><content type="html" xml:base="https://parkyo.github.io/categories/python-attributeerror/">&lt;p&gt;&lt;span class=&quot;image fit&quot;&gt;&lt;img src=&quot;/images/attributeerror.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;AttributeError&lt;/code&gt; is raised when an attribute reference or assignment fails.&lt;/p&gt;

&lt;h3 id=&quot;example&quot;&gt;Example&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;x = 10
x.append(6)&lt;/code&gt;&lt;/pre&gt;</content><category term="blog" /><category term="python" /><category term="error" /><summary type="html"></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://parkyo.github.io" /></entry><entry><title type="html">Django - Many-to-One Relationship</title><link href="https://parkyo.github.io/categories/django-many-to-one/" rel="alternate" type="text/html" title="Django - Many-to-One Relationship" /><published>2020-06-30T00:00:00+09:00</published><updated>2020-06-30T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/django-many-to-one</id><content type="html" xml:base="https://parkyo.github.io/categories/django-many-to-one/">&lt;h3 id=&quot;foreignkey&quot;&gt;Foreignkey&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.djangoproject.com/en/3.0/topics/db/examples/many_to_one/&quot;&gt;doc&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;</content><category term="blog" /><category term="django" /><category term="concepts" /><category term="python" /><summary type="html">Foreignkey
doc</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://parkyo.github.io" /></entry><entry><title type="html">Google Kick Start 2020 Round B - Robot Path Decoding</title><link href="https://parkyo.github.io/categories/kickstart-robotpath/" rel="alternate" type="text/html" title="Google Kick Start 2020 Round B - Robot Path Decoding" /><published>2020-06-29T00:00:00+09:00</published><updated>2020-06-29T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/kickstart-robotpath</id><content type="html" xml:base="https://parkyo.github.io/categories/kickstart-robotpath/">&lt;p&gt;&lt;a href=&quot;https://codingcompetitions.withgoogle.com/kickstart/round/000000000019ffc8/00000000002d83dc&quot;&gt;LINK&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;Know how to use &lt;code&gt;mod&lt;/code&gt; appropriately&lt;/blockquote&gt;
&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;
&lt;p&gt;Your countryâ€™s space agency has just landed a rover on a new planet, which can be thought of as a grid of squares containing 109 columns (numbered starting from 1 from west to east) and 109 rows (numbered starting from 1 from north to south). Let (w, h) denote the square in the w-th column and the h-th row. The rover begins on the square (1, 1).&lt;/p&gt;
&lt;p&gt;
The rover can be maneuvered around on the surface of the planet by sending it a program, which is a string of characters representing movements in the four cardinal directions. The robot executes each character of the string in order:

- N: Move one unit north.
- S: Move one unit south.
- E: Move one unit east.
- W: Move one unit west.

There is also a special instruction X(Y), where X is a number between 2 and 9 inclusive and Y is a non-empty subprogram. This denotes that the robot should repeat the subprogram Y a total of X times. For example:
2(NWE) is equivalent to NWENWE.
3(S2(E)) is equivalent to SEESEESEE.
EEEE4(N)2(SS) is equivalent to EEEENNNNSSSS.&lt;/p&gt;

&lt;p&gt;Since the planet is a torus, the first and last columns are adjacent, so moving east from column 109 will move the rover to column 1 and moving south from row 109 will move the rover to row 1. Similarly, moving west from column 1 will move the rover to column 109 and moving north from row 1 will move the rover to row 109. Given a program that the robot will execute, determine the final position of the robot after it has finished all its movements.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&lt;strong&gt;input&lt;/strong&gt;: 
4
SSSEEE
N
N3(S)N2(E)N
2(3(NW)2(W2(EE)W))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&lt;strong&gt;output&lt;/strong&gt;:
Case #1: 4 4
Case #2: 1 1000000000
Case #3: 3 1
Case #4: 3 999999995
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Keep track of the multipliers with a stack&lt;/li&gt;
  &lt;li&gt;if &lt;strong&gt;w&lt;/strong&gt; or &lt;strong&gt;h&lt;/strong&gt; is out of the boundary, make sure to use the mod value in case of multipliers being bigger than multiples of 10^9&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&lt;strong&gt;int robotpath(){
    int tests;
    cin &amp;gt;&amp;gt; tests;
       for(size_t i = 0; i &amp;lt; tests; ++i){
           string line;
           long w=1,h=1;
           cin &amp;gt;&amp;gt; line;
           stack&amp;lt;long&amp;gt; mults;
           mults.push(1);
           for(char c : line){
               if(c == ')'){
                   mults.pop();
               }else if (c=='('){
                   continue;
               }else if(c == 'N'){
                   h -= mults.top();
                   if(h &amp;lt;= 0){
                       h = h % (long)pow(10,9) + (long)pow(10,9);
                   }
               }
               else if(c == 'S'){
                   h+= mults.top();
                   if(h &amp;gt; pow(10,9)){
                       h = h % (long)pow(10,9);
                   }
                   
               }else if(c == 'E'){
                   w+= mults.top();
                   if(w &amp;gt; pow(10,9)){
                       w = w % (long)pow(10,9);
                   }
               }
               else if(c == 'W'){
                   w-= mults.top();
                   if(w &amp;lt;= 0){
                       w = w % (long)pow(10,9) + (long)pow(10,9);
                   }
               }else{
                   long mult = mults.top() * ((int)c - 48);
                   mults.push(mult);
               }
               
           }
           cout &amp;lt;&amp;lt; &quot;Case #&quot; &amp;lt;&amp;lt; i+1 &amp;lt;&amp;lt; &quot;: &quot; &amp;lt;&amp;lt;  w &amp;lt;&amp;lt; &quot; &quot; &amp;lt;&amp;lt; h &amp;lt;&amp;lt; endl;
       }
       return 0;
}&lt;/strong&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Time copmlexity: &lt;i&gt;O(t*n)&lt;/i&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;!-- &lt;pre&gt;&lt;code&gt; --&gt;</content><category term="blog" /><category term="algorithm" /><category term="kick_start" /><summary type="html">LINK
Know how to use mod appropriately
Problem
Your countryâ€™s space agency has just landed a rover on a new planet, which can be thought of as a grid of squares containing 109 columns (numbered starting from 1 from west to east) and 109 rows (numbered starting from 1 from north to south). Let (w, h) denote the square in the w-th column and the h-th row. The rover begins on the square (1, 1).

The rover can be maneuvered around on the surface of the planet by sending it a program, which is a string of characters representing movements in the four cardinal directions. The robot executes each character of the string in order:</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://parkyo.github.io" /></entry><entry><title type="html">Google Kick Start 2020 Round B - Bus Routes</title><link href="https://parkyo.github.io/categories/kickstart-busroutes/" rel="alternate" type="text/html" title="Google Kick Start 2020 Round B - Bus Routes" /><published>2020-06-27T00:00:00+09:00</published><updated>2020-06-27T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/kickstart-busroutes</id><content type="html" xml:base="https://parkyo.github.io/categories/kickstart-busroutes/">&lt;p&gt;&lt;a href=&quot;https://codingcompetitions.withgoogle.com/kickstart/round/000000000019ffc8/00000000002d82e6&quot;&gt;LINK&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;
&lt;p&gt;Bucket is planning to make a very long journey across the countryside by bus. Her journey consists of N bus routes, numbered from 1 to N in the order she must take them. The buses themselves are very fast, but do not run often. The i-th bus route only runs every Xi days.&lt;/p&gt;

&lt;p&gt;More specifically, she can only take the i-th bus on day Xi, 2Xi, 3Xi and so on. Since the buses are very fast, she can take multiple buses on the same day.&lt;/p&gt;

&lt;p&gt;Bucket must finish her journey by day D, but she would like to start the journey as late as possible. What is the latest day she could take the first bus, and still finish her journey by day D?&lt;/p&gt;

&lt;p&gt;It is guaranteed that it is possible for Bucket to finish her journey by day D.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&lt;strong&gt;input&lt;/strong&gt;: 
3
3 10
3 7 2
4 100
11 10 5 50
1 1
1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&lt;strong&gt;output1&lt;/strong&gt;:
Case #1: 6
Case #2: 99
Case #3: 1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Store the bus days in a stack&lt;/li&gt;
  &lt;li&gt;For each value in the stack, calculate the latest bus day for that bus route&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;*** It is important to use &lt;code&gt;long&lt;/code&gt; to keep track of the latest day since the last day can be any number up to 10^9.&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;&lt;strong&gt;int busroutes(){
    int tests, size;
    long last;
   cin &amp;gt;&amp;gt; tests;
   for(size_t i = 0; i &amp;lt; tests; ++i){
       cin &amp;gt;&amp;gt; size &amp;gt;&amp;gt; last;
       long ans;
       if(size==1){
           cin &amp;gt;&amp;gt; ans;
           ans = last/ans * ans;
       }else{
           stack&amp;lt;long&amp;gt; list;
           while(--size &amp;gt;= 0){
               long cur;
               cin &amp;gt;&amp;gt; cur;
               list.push(cur);
           }
           while(list.size() &amp;gt; 0){
               long cur = list.top();
               list.pop();
               last = last/cur * cur;
           }
           ans = last;
       }
       
       cout &amp;lt;&amp;lt; &quot;Case #&quot; &amp;lt;&amp;lt; i+1 &amp;lt;&amp;lt; &quot;: &quot; &amp;lt;&amp;lt;  ans &amp;lt;&amp;lt; endl;
   }
   return 0;
}&lt;/strong&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Time copmlexity: &lt;i&gt;O(t*n)&lt;/i&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;!-- &lt;pre&gt;&lt;code&gt; --&gt;</content><category term="blog" /><category term="algorithm" /><category term="kick_start" /><category term="stack" /><summary type="html">LINK</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://parkyo.github.io" /></entry><entry><title type="html">Google Kick Start 2020 Round B - Bike Tour</title><link href="https://parkyo.github.io/categories/kickstart-biketour/" rel="alternate" type="text/html" title="Google Kick Start 2020 Round B - Bike Tour" /><published>2020-06-27T00:00:00+09:00</published><updated>2020-06-27T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/kickstart-biketour</id><content type="html" xml:base="https://parkyo.github.io/categories/kickstart-biketour/">&lt;p&gt;&lt;a href=&quot;https://codingcompetitions.withgoogle.com/kickstart/round/000000000019ffc8/00000000002d82e6&quot;&gt;LINK&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;
&lt;p&gt;Li has planned a bike tour through the mountains of Switzerland. His tour consists of N checkpoints, numbered from 1 to N in the order he will visit them. The i-th checkpoint has a height of Hi.&lt;/p&gt;

&lt;p&gt;A checkpoint is a peak if:
It is not the 1st checkpoint or the N-th checkpoint, and
The height of the checkpoint is strictly greater than the checkpoint immediately before it and the checkpoint immediately after it.&lt;/p&gt;

&lt;p&gt;Please help Li find out the number of peaks.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&lt;strong&gt;input1&lt;/strong&gt;: 
4
3
10 20 14
4
7 7 7 7
5
10 90 20 90 10
3
10 3 10&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&lt;strong&gt;output1&lt;/strong&gt;:
Case #1: 1
Case #2: 0
Case #3: 2
Case #4: 0
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;solution&quot;&gt;Solution&lt;/h2&gt;
&lt;p&gt;As scanning through the list, keep track of three values: &lt;strong&gt;first, sec, third&lt;/strong&gt;. Check if any satisfies the conditions for being a peak.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;strong&gt;int biketour(){
    int tests, size;
    cin &amp;gt;&amp;gt; tests;
    for(size_t j = 0; j &amp;lt; tests; ++j){
        cin &amp;gt;&amp;gt; size;
        int bfr, cur, after, count = 0;
        cin &amp;gt;&amp;gt; bfr;
        cin &amp;gt;&amp;gt; cur;
        for(size_t i = 0; i &amp;lt; size-2; ++i){
            cin &amp;gt;&amp;gt; after;
            if(bfr &amp;lt; cur &amp;amp;&amp;amp; cur &amp;gt; after){
                    ++count;
            }
            bfr = cur;
            cur = after;
        }
        
        cout &amp;lt;&amp;lt; &quot;Case #&quot; &amp;lt;&amp;lt; j+1 &amp;lt;&amp;lt; &quot;: &quot; &amp;lt;&amp;lt; count &amp;lt;&amp;lt; endl;
    }
    return 0;
}&lt;/strong&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Time copmlexity: &lt;i&gt;O(t*n)&lt;/i&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;!-- &lt;pre&gt;&lt;code&gt; --&gt;</content><category term="blog" /><category term="algorithm" /><category term="kick_start" /><category term="iteration" /><summary type="html">LINK</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://parkyo.github.io" /></entry></feed>
