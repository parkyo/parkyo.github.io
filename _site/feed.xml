<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="https://parkyo.github.io/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.2.1">Jekyll</generator><link href="https://parkyo.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://parkyo.github.io/" rel="alternate" type="text/html" /><updated>2020-06-26T15:20:33+09:00</updated><id>https://parkyo.github.io/</id><title type="html">Younse Park</title><subtitle>Hi, I am a software engineer</subtitle><entry><title type="html">Django - template extending</title><link href="https://parkyo.github.io/categories/django-template-extending/" rel="alternate" type="text/html" title="Django - template extending" /><published>2020-06-25T00:00:00+09:00</published><updated>2020-06-25T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/django-template-extending</id><content type="html" xml:base="https://parkyo.github.io/categories/django-template-extending/">&lt;p&gt;&lt;strong&gt;Template extending&lt;/strong&gt; means you can reuse same parts of HTML for different pages of website and prevent you from code repetition.&lt;/p&gt;

&lt;h3 id=&quot;how-to&quot;&gt;How To&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Create a base template &lt;code&gt;templates/base.html&lt;/code&gt;&lt;/li&gt;
&lt;span class=&quot;image fit&quot;&gt;&lt;img src=&quot;/images/basehtml.png&quot; /&gt;&lt;/span&gt;

&lt;li&gt;Replace the part which content is dependent on other templates with &lt;code&gt;&amp;#123;&amp;#37; block content &amp;#37;&amp;#125;&amp;#123;&amp;#37; endblock &amp;#37;&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;span class=&quot;image fit&quot;&gt;&lt;img src=&quot;/images/basehtml2.png&quot; /&gt;&lt;/span&gt;

&lt;li&gt;In other templates, extend &lt;code&gt;base.html&lt;/code&gt; and code what should be inside of &lt;code&gt;&amp;#123;&amp;#37; block content &amp;#37;&amp;#125;&amp;#123;&amp;#37; endblock &amp;#37;&amp;#125;&lt;/code&gt;&lt;/li&gt;
&lt;span class=&quot;image fit&quot;&gt;&lt;img src=&quot;/images/extendhtml.png&quot; /&gt;&lt;/span&gt;
&lt;/ol&gt;</content><category term="blog" /><category term="django" /><category term="concepts" /><category term="python" /><summary type="html">Template extending means you can reuse same parts of HTML for different pages of website and prevent you from code repetition.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://parkyo.github.io" /></entry><entry><title type="html">Django - Object Relational Mapper Theory</title><link href="https://parkyo.github.io/categories/django-orm/" rel="alternate" type="text/html" title="Django - Object Relational Mapper Theory" /><published>2020-06-25T00:00:00+09:00</published><updated>2020-06-25T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/django-orm</id><content type="html" xml:base="https://parkyo.github.io/categories/django-orm/">&lt;h2 id=&quot;orm&quot;&gt;ORM&lt;/h2&gt;
&lt;p&gt;The user uses application to access data.&lt;/p&gt;

&lt;p&gt;Database has tables with data. One object will represent each column.
ex) product table customer table etc.
Customer table wil have cust_id, cust_name, cust_phn data.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;classs Customer:
    cust_id: int
    cust_name: str
    cust_phn: int
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Django&lt;/strong&gt; creates a table in database automatically when an object is created in &lt;strong&gt;models.py&lt;/strong&gt;, which is called &lt;strong&gt;ORM theory&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;database-engine&quot;&gt;Database Engine&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Oracle, MySQL, SQLite…&lt;/li&gt;
&lt;/ul&gt;</content><category term="blog" /><category term="django" /><category term="concepts" /><category term="python" /><summary type="html">ORM
The user uses application to access data.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://parkyo.github.io" /></entry><entry><title type="html">HTTP Methods - GET vs POST</title><link href="https://parkyo.github.io/categories/django-get-post/" rel="alternate" type="text/html" title="HTTP Methods - GET vs POST" /><published>2020-06-25T00:00:00+09:00</published><updated>2020-06-25T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/django-get-post</id><content type="html" xml:base="https://parkyo.github.io/categories/django-get-post/">&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=OTmQOjsl0eg&quot;&gt; recommendation for Django tutorial&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;http-protocol&quot;&gt;HTTP Protocol&lt;/h2&gt;
&lt;p&gt;&lt;span class=&quot;image fit&quot;&gt;&lt;img src=&quot;/images/httpprotocol.png&quot; /&gt;&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Request Methods&lt;/strong&gt; GET POST PUT DELETE HEAD CONNECT OPTION TRACE PATCH&lt;/p&gt;

&lt;h3 id=&quot;get&quot;&gt;GET&lt;/h3&gt;
&lt;p&gt;: fetch data from the server
The data is sent to the address bar. So we don’t want to use &lt;code&gt;GET&lt;/code&gt; for private data such as userID and password&lt;/p&gt;

&lt;h3 id=&quot;post&quot;&gt;POST&lt;/h3&gt;
&lt;p&gt;: update data of the server
Use &lt;code&gt;CSRF Token&lt;/code&gt; for this method&lt;/p&gt;</content><category term="blog" /><category term="django" /><category term="concepts" /><category term="python" /><category term="HTTP" /><summary type="html">recommendation for Django tutorial</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://parkyo.github.io" /></entry><entry><title type="html">Django Concepts</title><link href="https://parkyo.github.io/categories/Django-concepts/" rel="alternate" type="text/html" title="Django Concepts" /><published>2020-06-25T00:00:00+09:00</published><updated>2020-06-25T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/Django-concepts</id><content type="html" xml:base="https://parkyo.github.io/categories/Django-concepts/">&lt;h3 id=&quot;django&quot;&gt;Django&lt;/h3&gt;
&lt;p&gt;MVT - Model View Template&lt;/p&gt;

&lt;p&gt;To accomplish &lt;strong&gt;Separation of Concern&lt;/strong&gt; by separating…&lt;/p&gt;
&lt;li&gt;Data - Model&lt;/li&gt;
&lt;li&gt;Layout - Django Template Language allows dynamic data&lt;/li&gt;
&lt;li&gt;Logic&lt;/li&gt;

&lt;p&gt;&lt;span class=&quot;image fit&quot;&gt;&lt;img src=&quot;/images/MVT.png&quot; /&gt;&lt;/span&gt;
Data from database is linked with &lt;strong&gt;Model&lt;/strong&gt;. &lt;strong&gt;View&lt;/strong&gt; links &lt;strong&gt;Model&lt;/strong&gt; and &lt;strong&gt;Template&lt;/strong&gt; together. When the user sends a request, it goes to the framework forming a URL that navigates to &lt;strong&gt;View&lt;/strong&gt;. In &lt;strong&gt;View&lt;/strong&gt;, we write busienss logic. Then, it will use the model and template objects to decide what data to be sent on &lt;strong&gt;template &lt;/strong&gt;from &lt;strong&gt;model&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;mvt-vs-mvc&quot;&gt;MVT vs. MVC&lt;/h3&gt;
&lt;li&gt;Model = Model&lt;/li&gt;
&lt;li&gt;Template = View&lt;/li&gt;
&lt;li&gt;View = Controller&lt;/li&gt;

&lt;p&gt;However, MVC needs a configuration for &lt;strong&gt;Controller&lt;/strong&gt; where as &lt;strong&gt;Django&lt;/strong&gt; does it automatically.&lt;/p&gt;

&lt;h3 id=&quot;advantages&quot;&gt;Advantages&lt;/h3&gt;
&lt;li&gt;Develop Fast&lt;/li&gt;
&lt;li&gt;Provide Bundled Components &lt;/li&gt;
&lt;li&gt;Data Security &lt;/li&gt;
&lt;li&gt;Scalability &lt;/li&gt;</content><category term="blog" /><category term="django" /><category term="concepts" /><category term="python" /><summary type="html">Django
MVT - Model View Template</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://parkyo.github.io" /></entry><entry><title type="html">Google Kick Start 2020 Round A - Workout</title><link href="https://parkyo.github.io/categories/google-kickstart-workout/" rel="alternate" type="text/html" title="Google Kick Start 2020 Round A - Workout" /><published>2020-06-24T00:00:00+09:00</published><updated>2020-06-24T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/google-kickstart-workout</id><content type="html" xml:base="https://parkyo.github.io/categories/google-kickstart-workout/">&lt;p&gt;&lt;a href=&quot;https://codingcompetitions.withgoogle.com/kickstart/round/000000000019ffc7/00000000001d3ff3&quot;&gt;LINK&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;
&lt;p&gt;Pip has N strings. Each string consists only of letters from A to Z. Pip would like to bundle their strings into groups of size K. Each string must belong to exactly one group.&lt;/p&gt;

&lt;p&gt;The score of a group is equal to the length of the longest prefix shared by all the strings in that group. For example:
The group {RAINBOW, RANK, RANDOM, RANK} has a score of 2 (the longest prefix is ‘RA’).
The group {FIRE, FIREBALL, FIREFIGHTER} has a score of 4 (the longest prefix is ‘FIRE’).
The group {ALLOCATION, PLATE, WORKOUT, BUNDLING} has a score of 0 (the longest prefix is ‘’).&lt;/p&gt;

&lt;p&gt;Please help Pip bundle their strings into groups of size K, such that the sum of scores of the groups is maximized.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&lt;strong&gt;input&lt;/strong&gt;: 
2
2 2
KICK
START
8 2
G
G
GO
GO
GOO
GOO
GOOO
GOOO&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&lt;strong&gt;output&lt;/strong&gt;:
Case #1: 0
Case #2: 10
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;solution-1&quot;&gt;Solution 1&lt;/h2&gt;
&lt;blockquote&gt;(MLT for bigger test set)&lt;/blockquote&gt;
&lt;p&gt;(explanation to come..)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&lt;strong&gt;
int main(){
    int tests, size, b;
    cin &amp;gt;&amp;gt; tests;
    for(size_t j = 0; j &amp;lt; tests; ++j){
        int score = 0;
        cin &amp;gt;&amp;gt; size &amp;gt;&amp;gt; b;
        unordered_map&amp;lt;string, int&amp;gt; list;
        for(size_t i = 0; i &amp;lt; size; ++i){
            string w;
            cin &amp;gt;&amp;gt; w;
            string cur = &quot;&quot;;
            for(size_t k =0; k &amp;lt; w.size(); ++k){
                cur.push_back(w[k]);
                auto it = list.find(cur);
                if(it == list.end()){
                    list.insert(pair&amp;lt;string,int&amp;gt;(cur, 1));
                }else{
                    ++(it-&amp;gt;second);
                }
            }
            
            
        }
        for(auto it = list.begin(); it != list.end(); ++it){
            score += ((it-&amp;gt;second)/b);
        }
        
        cout &amp;lt;&amp;lt; &quot;Case #&quot; &amp;lt;&amp;lt; j+1 &amp;lt;&amp;lt; &quot;: &quot; &amp;lt;&amp;lt; score &amp;lt;&amp;lt; endl;
    }
    return 0;
}
   &lt;/strong&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;solution-2&quot;&gt;Solution 2&lt;/h3&gt;
&lt;p&gt;Use &lt;strong&gt;trie&lt;/strong&gt;&lt;/p&gt;

&lt;!-- &lt;pre&gt;&lt;code&gt; --&gt;</content><category term="blog" /><category term="algorithm" /><category term="kick_start" /><summary type="html">LINK</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://parkyo.github.io" /></entry><entry><title type="html">Google Kick Start 2020 Round A - Plates</title><link href="https://parkyo.github.io/categories/google-kickstart-bundling/" rel="alternate" type="text/html" title="Google Kick Start 2020 Round A - Plates" /><published>2020-06-24T00:00:00+09:00</published><updated>2020-06-24T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/google-kickstart-bundling</id><content type="html" xml:base="https://parkyo.github.io/categories/google-kickstart-bundling/">&lt;p&gt;&lt;a href=&quot;https://codingcompetitions.withgoogle.com/kickstart/round/000000000019ffc7/00000000001d3ff3&quot;&gt;LINK&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;problem&quot;&gt;Problem&lt;/h2&gt;
&lt;p&gt;Pip has N strings. Each string consists only of letters from A to Z. Pip would like to bundle their strings into groups of size K. Each string must belong to exactly one group.&lt;/p&gt;

&lt;p&gt;The score of a group is equal to the length of the longest prefix shared by all the strings in that group. For example:
The group {RAINBOW, RANK, RANDOM, RANK} has a score of 2 (the longest prefix is ‘RA’).
The group {FIRE, FIREBALL, FIREFIGHTER} has a score of 4 (the longest prefix is ‘FIRE’).
The group {ALLOCATION, PLATE, WORKOUT, BUNDLING} has a score of 0 (the longest prefix is ‘’).&lt;/p&gt;

&lt;p&gt;Please help Pip bundle their strings into groups of size K, such that the sum of scores of the groups is maximized.&lt;/p&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;&lt;strong&gt;input&lt;/strong&gt;: 
2
2 2
KICK
START
8 2
G
G
GO
GO
GOO
GOO
GOOO
GOOO&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;&lt;strong&gt;output&lt;/strong&gt;:
Case #1: 0
Case #2: 10
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;solution-1&quot;&gt;Solution 1&lt;/h2&gt;
&lt;blockquote&gt;(MLT for bigger test set)&lt;/blockquote&gt;
&lt;p&gt;(explanation to come..)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
&lt;strong&gt;
int main(){
    int tests, size, b;
    cin &amp;gt;&amp;gt; tests;
    for(size_t j = 0; j &amp;lt; tests; ++j){
        int score = 0;
        cin &amp;gt;&amp;gt; size &amp;gt;&amp;gt; b;
        unordered_map&amp;lt;string, int&amp;gt; list;
        for(size_t i = 0; i &amp;lt; size; ++i){
            string w;
            cin &amp;gt;&amp;gt; w;
            string cur = &quot;&quot;;
            for(size_t k =0; k &amp;lt; w.size(); ++k){
                cur.push_back(w[k]);
                auto it = list.find(cur);
                if(it == list.end()){
                    list.insert(pair&amp;lt;string,int&amp;gt;(cur, 1));
                }else{
                    ++(it-&amp;gt;second);
                }
            }
            
            
        }
        for(auto it = list.begin(); it != list.end(); ++it){
            score += ((it-&amp;gt;second)/b);
        }
        
        cout &amp;lt;&amp;lt; &quot;Case #&quot; &amp;lt;&amp;lt; j+1 &amp;lt;&amp;lt; &quot;: &quot; &amp;lt;&amp;lt; score &amp;lt;&amp;lt; endl;
    }
    return 0;
}
   &lt;/strong&gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;solution-2&quot;&gt;Solution 2&lt;/h3&gt;
&lt;p&gt;Use &lt;strong&gt;trie&lt;/strong&gt;&lt;/p&gt;

&lt;!-- &lt;pre&gt;&lt;code&gt; --&gt;</content><category term="blog" /><category term="algorithm" /><category term="kick_start" /><category term="trie" /><category term="string" /><summary type="html">LINK</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://parkyo.github.io" /></entry><entry><title type="html">Django - dynamically type url</title><link href="https://parkyo.github.io/categories/dynamic-url-django/" rel="alternate" type="text/html" title="Django - dynamically type url" /><published>2020-06-24T00:00:00+09:00</published><updated>2020-06-24T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/dynamic-url-django</id><content type="html" xml:base="https://parkyo.github.io/categories/dynamic-url-django/">&lt;pre&gt;&lt;code&gt;&quot;adults&quot;: &quot;1&quot;
&quot;childs&quot;:&quot;0&quot;
&quot;infants&quot;:&quot;0&quot;
&quot;res&quot;: &quot;0&quot;
&quot;vehicle&quot;:&quot;0&quot;
outbound_route = '1040'
outbound_date = '19-02-2019'
inbound_route = '1042'
inbound_date = '20-02-2019'

url = &quot;https://booking.snav.it/#/booking/rates&quot;  # no trailing /
final_url = '/'.join([url, outbound_route, outbound_date, inbound_route, inbound_date])
res = requests.get(final_url, params=params)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or you could use a formatted string literal:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;url = &quot;https://booking.snav.it/#/booking/rates/&quot;
final_url = f'{url}{outbound_route}/{outbound_date}/{inbound_route}/{inbound_date}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;output&quot;&gt;output&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;https://booking.snav.it/#/booking/rates/1040/19-02-2019/1042/19-02-2019?adults=1&amp;amp;childs=0&amp;amp;infants=0&amp;amp;res=0&amp;amp;vehicle=0&lt;/code&gt;&lt;/pre&gt;</content><category term="blog" /><category term="web" /><category term="server-side" /><category term="django" /><category term="python" /><summary type="html">&quot;adults&quot;: &quot;1&quot;
&quot;childs&quot;:&quot;0&quot;
&quot;infants&quot;:&quot;0&quot;
&quot;res&quot;: &quot;0&quot;
&quot;vehicle&quot;:&quot;0&quot;
outbound_route = '1040'
outbound_date = '19-02-2019'
inbound_route = '1042'
inbound_date = '20-02-2019'</summary></entry><entry><title type="html">Django - how to fetch data from external website</title><link href="https://parkyo.github.io/categories/fetch/" rel="alternate" type="text/html" title="Django - how to fetch data from external website" /><published>2020-06-23T00:00:00+09:00</published><updated>2020-06-23T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/fetch</id><content type="html" xml:base="https://parkyo.github.io/categories/fetch/">&lt;h2 id=&quot;fetch&quot;&gt;Fetch&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Fetch&lt;/strong&gt; is a process of bringing or displaying data to an alternate location.&lt;/p&gt;

&lt;h2 id=&quot;fetch-data-from-web&quot;&gt;Fetch data from web&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Web scraping&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def fetchFilteredClasses(dpt):
    classnames=[]
    url = 'https://www.lsa.umich.edu/cg/cg_results.aspx?termArray=f_20_2310&amp;amp;cgtype=ug&amp;amp;department=&amp;amp;allsections=true'
    response = requests.get(url)
    soup = BeautifulSoup(response.content,&quot;html.parser&quot;)
    for a in soup.findAll('div', attrs = {'class' : 'row toppadding_main bottompadding_interior'}):
        name = a.find('div', attrs={'class':'col-sm-12'})
        classnames.append(name.text)

    df = pd.DataFrame({'Class Name':classnames}) 
    df.to_csv('products.csv', index=False, encoding='utf-8')

&lt;/code&gt;&lt;/pre&gt;</content><category term="blog" /><category term="concepts" /><category term="web" /><category term="server-side" /><summary type="html">Fetch
Fetch is a process of bringing or displaying data to an alternate location.</summary></entry><entry><title type="html">Python basics</title><link href="https://parkyo.github.io/categories/python-basics/" rel="alternate" type="text/html" title="Python basics" /><published>2020-06-22T00:00:00+09:00</published><updated>2020-06-22T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/python-basics</id><content type="html" xml:base="https://parkyo.github.io/categories/python-basics/">&lt;h3 id=&quot;uses&quot;&gt;Uses&lt;/h3&gt;
&lt;li&gt;Web Development&lt;/li&gt;
&lt;li&gt;Machine Learning&lt;/li&gt;
&lt;li&gt;Data Analytics&lt;/li&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;self&quot;&gt;self&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;self&lt;/strong&gt; is an instance of the class to access properties and methods of the class&lt;/p&gt;</content><category term="blog" /><category term="concepts" /><category term="python" /><summary type="html">Uses
Web Development
Machine Learning
Data Analytics</summary></entry><entry><title type="html">What is Operating System</title><link href="https://parkyo.github.io/categories/operating-system/" rel="alternate" type="text/html" title="What is Operating System" /><published>2020-06-22T00:00:00+09:00</published><updated>2020-06-22T00:00:00+09:00</updated><id>https://parkyo.github.io/categories/operating-system</id><content type="html" xml:base="https://parkyo.github.io/categories/operating-system/">&lt;p&gt;&lt;strong&gt;Operating Systems&lt;/strong&gt; are programs for computers to operate on their own. 
&lt;i&gt;ex) MacOS, Android, Windows…&lt;/i&gt;&lt;/p&gt;

&lt;h3 id=&quot;features&quot;&gt;Features&lt;/h3&gt;
&lt;li&gt;&lt;strong&gt;Device Drivers&lt;/strong&gt; : intermediaries between software programs and hardware peripheral using API allowing talking to I/O hardware&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multitasking&lt;/strong&gt; : allows multiple programs on a single CPU&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Virtual Memory&lt;/strong&gt; : virtualizes locations of the memory allocated to each program to hide physical locations and simplify it for programmers&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Dynamic Memory Allocation&lt;/strong&gt; : allows program sto have flexible memory size with virtual memory addresses&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Memory Protection&lt;/strong&gt; : prevets a program from destroying memory of the other progam&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Time Sharing&lt;/strong&gt; : manages multiple users&lt;/li&gt;
&lt;p&gt;&lt;br /&gt;
&lt;strong&gt;Unix &lt;/strong&gt;appears to simplify the engineering of the early OS by separating it into two parts:&lt;/p&gt;
&lt;li&gt;&lt;strong&gt;Kernel&lt;/strong&gt; : manages memory and multi-tasking or deals with I/O&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;programs &amp;amp; libraries&lt;/strong&gt;&lt;/li&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;ubuntu&quot;&gt;Ubuntu&lt;/h3&gt;
&lt;p&gt;An open-source, Debian based operating system&lt;/p&gt;</content><category term="blog" /><category term="concepts" /><category term="computer" /><summary type="html">Operating Systems are programs for computers to operate on their own. 
ex) MacOS, Android, Windows…</summary></entry></feed>
